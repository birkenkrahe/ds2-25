#+TITLE: CALLING FUNCTIONS - SCOPING
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
#+property: header-args:python :session *Python* :python python3 :results output :exports both: 
* README
#+attr_html: :width 500px
#caption: Matryoshka dolls
[[../img/matryoshka.jpg]]

You will learn:

- [ ] How variable names are compartmentalized in R
- [ ] What the rules for naming arguments and objects are
- [ ] How R searches for arguments and variables
- [ ] How you can specify arguments when calling a function

There is a code along file and a practice file:
1) Code along: [[https://tinyurl.com/scoping-codealong-org][tinyurl.com/scoping-codealong-org]]
2) Practice: [[https://tinyurl.com/scoping-practice-org][tinyurl.com/scoping-practice-org]]

* Scoping

- Scoping rules determine how R stores and retrieves objects

- Applied e.g. when handling duplicate object names

- Example: ~data~ as an argument, and as a function -
  1) create a row-wise 3x3 matrix of numbers {1..9}
  2) list all built-in datasets

  #+begin_src R
    ## create row-wise 3x3 matrix of 1...9
    matrix(data=1:9,nrow=3)
    ## list all datasets in the MASS package (if installed)
    data() -> datasets
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3]
  : [1,]    1    4    7
  : [2,]    2    5    8
  : [3,]    3    6    9

- The R object =datasets= hold the =data()= information now. You can save
  this object externally in =.RData= format:
  #+begin_src R
    save(datasets,file="datasets.RData")
    system("file datasets.RData")  # Linux & MacOS (Unix)
    shell("DIR datasets.RData") # on Windows
  #+end_src

  #+RESULTS:
  : datasets.RData: gzip compressed data, from Unix, original size modulo 2^32 11316
  : Error in shell("DIR datasets.RData") : could not find function "shell"

* Environments

- R enforces scoping rules with virtual /environment/

- An environment is a separate compartment for data structures (like
  vectors) and functions (like ~data~).

- Environments are *dynamic* - they can be created, manipulated and
  removed.

- Technically, an environment is a *pointer* to the memory location
  where the R objects are stored.

- There are three types of environments:
  1) *Global* environments
  2) *Package* environments and namespaces
  3) *Local* or lexical environments

* Global environments

- Every object you've created or overwritten resides in the global
  environment of your R session.

- A call to ~ls()~ lists all objects, variables, and user-defined
  functions in the global environment

  #+begin_src R
    ls()
  #+end_src

  #+RESULTS:
  : [1] "classroom"    "datasets"     "grades"       "m"            "sales"        "scores"       "student1"    
  : [8] "students"     "temperatures"

- *Example:* create three new objects and confirm their existence
  in the global environment:
  1) a ~numeric~ variable ~foo~
  2) a ~character~ variable ~bar~
  3) An anonymous (non-argument) function ~hello~
  4) check the contents of the global environment with ~ls~
  5) run ~hello~

  #+begin_src R
    foo <- 4 + 5 # same as +(4,5)
    foo
    bar <- "stringtastic"
    bar
    hello <- function() "hello"
    hello()  # hello is an anonymous function (void of args)
  #+end_src

  #+RESULTS:
  : [1] 9
  : [1] "stringtastic"
  : [1] "hello"

* Package environments and namespaces

- Package environments are items made available by each package in R.

- You can use ~ls~ to list the items in a package environment: for
  example, to list the content of built-in  ~datasets~ (no functions)
  #+begin_src R
    ls(datasets) # lists the content of the `datasets` list
    head(ls("package:datasets"),5) # lists `datasets` package contents
  #+end_src

  #+RESULTS:
  : [1] "footer"  "header"  "results" "title"
  : [1] "ability.cov"   "airmiles"      "AirPassengers" "airquality"    "anscombe"

  Or to list the visible objects of the (built-in) ~graphics~ package:
  #+begin_src R
    ls("package:graphics") |> head(10)
  #+end_src

  #+RESULTS:
  :  [1] "abline"          "arrows"          "assocplot"       "axis"            "Axis"            "axis.Date"      
  :  [7] "axis.POSIXct"    "axTicks"         "barplot"         "barplot.default"

- Though you may have used it often already, check out the =help= page
  for =ls=. If you're on Linux, you'll get a proper man page.

- A package /namespace/ allows the package writer to hide functions and
  data that are only for internal use, and stops functions from
  breaking when a user or another package writer uses a duplicate
  name.

- As an example, load (after *installation*) the ~dplyr~ package (don't
  print the content - it has 300 functions!) and run ~dplyr::filter~.
  #+begin_src R
    library(dplyr)
    dplyr::filter  # look for `filter` in the dplyr namespace
  #+end_src

  #+RESULTS:
  #+begin_example
  function (.data, ..., .by = NULL, .preserve = FALSE) 
  {
      check_by_typo(...)
      by <- enquo(.by)
      if (!quo_is_null(by) && !is_false(.preserve)) {
          abort("Can't supply both `.by` and `.preserve`.")
      }
      UseMethod("filter")
  }
  <bytecode: 0x55662e3315c0>
  <environment: namespace:dplyr>
  #+end_example
  
- If you look at the output (the definition of ~filter~ in this package,
  you notice an internal (~base~) function, ~UseMethod~, which is not
  listed in the visible content of ~dplyr~, and the name of the
  ~namespace~ environment.

- When loading ~dplyr~, you were informed that ~dplyr::filter~ masks
  another function, ~stats::filter~. This means that using ~filter~
  without the namespace reverts to ~dplyr::filter~. If you want to use
  the function of the same name in ~stats~, you need to call
  ~stats::filter~.

* Local or lexical environments

- Each time a function is called, a new environment called /local/ or
  /lexical/ is created.

- It contains all objects and variables created in and visible to the
  function, including any arguments you've supplied during execution.

- Example: create a 2x2 ~matrix~ named =nerdspeak=, and pass in the
  argument ~data~: "IDK", "LOL", "BRB", "AFK":

  #+begin_src R

  #+end_src

- Calling ~matrix~ like this creates a local environment containing the
  ~data~ vector

- When you execute the function, it begins by looking for ~data~ in this
  local environment. It is not confused by other objects named ~data~,
  such as ~utils::data~.

- If a required item is not found in the local environment, R does
  begin to widen its search.

- Once the function has completed, the local environment is
  automatically removed. The same goes for ~nrow~ and ~ncol~.

* Namespaces and Environments in R and Python

Both R and Python manage *scoping* and *namespaces* through *environments*,
but they do so differently.

** In Python

- Functions also use *lexical (local) scoping*.

- *Namespaces* exist at the module, class, and function levels.

- Python uses *dictionaries* internally to manage namespaces.

- Python has built-in functions to explore namespaces:

  - =globals()= returns the global namespace as a dictionary.
    #+begin_src python

    #+end_src

  - =locals()= returns the local namespace as a dictionary.

  - =dir()= lists the names defined in a namespace.
    #+begin_src python
    
    #+end_src

** Comparison of Namespace and Environment Handling

| Feature            | R                           | Python                     |
|--------------------+-----------------------------+----------------------------|
| *Scoping*            | Lexical (local)             | Lexical (local)            |
| *Environment*        | Explicit environment object | Implicit via dictionaries  |
| *Namespace Levels*   | Package, function           | Module, class, function    |
| *Built-in Functions* | =new.env()=, =parent.env()=     | =globals()=, =locals()=, =dir()= |


Let's demo R's environment functions:
#+begin_src R

#+end_src

* Search Path

- To access data structures and functions other than the immediate
  global environment (of user-created objects), R follows a /search
  path/.

- You can view the search path with ~search()~:
  #+begin_src R
  
  #+end_src

- The path always begins at ~.GlobalEnv~ and ends after ~base~. It stops
  if an object is found in any environment along the path.

- If it does not find what it wanted, the /empty environment/ is
  reached.

- Example: let's see what happens when we create a vector with ~seq~:
  1) create a vector of 5 elements with ~seq~
  2) the values should lay between the (included) values 0 and 3
  #+begin_src R

  #+end_src

- R searches ~.GlobalEnv~ for ~seq~, goes through the list and finds it in
  ~base~. ~seq~ is executed and ~baz~ is created in the global environment.

- In the subsequent call to ~baz~, R finds it immediately in ~.GlobalEnv~.

- You can look up the environment of any function using ~environment~:
  #+begin_src R

  #+end_src

- When a package is loaded with ~library~, it is inserted in the search
  path right after the global environment, along with all its
  dependencies. Let's load =Rcpp=.
  #+begin_src R

  #+end_src

- Do you remember how to list the contents of =Rcpp=?
  #+begin_src R

  #+end_src

- An error is thrown if you request a function or object
  + that you haven't *defined*,
  + that doesn't *exist*,
  + that is in a contributed package that you've forgotten to *load*
  #+begin_src R

  #+end_src


- Read [[https://blog.thatbuthow.com/how-r-searches-and-finds-stuff/][Gupta (2012)]] for more details on R environments. (This would
  also make an excellent term project topic.)

* Reserved and protected names

- Key terms that are forbidden from being used as R object names:
  + ~if~ and ~else~
  + ~for~, ~while~, and ~in~
  + ~repeat~, ~break~, and ~next~
  + ~TRUE~, and ~FALSE~
  + ~Inf~ and ~-Inf~
  + ~NA~, ~NaN~, and ~NULL~

- The first four line items are the core tools for programming in R,
  followed by Boolean values and special values.

- What happens when you assign a value to an ~NaN~?
  #+begin_src R

  #+end_src

- Since R is case-sensitive, you can assign values to case variants of
  these keywords, causing much confusion:
  #+begin_src R

  #+end_src

- ~T~ and ~F~ can also be overwritten - don't do it since they are the
  abbreviations for ~TRUE~ and ~FALSE~:
  #+begin_src R

  #+end_src

- With all these confusing changes, clear the global environment now!
  #+begin_src R

  #+end_src

* Glossary

| TERM                 | MEANING                                     |
|----------------------+---------------------------------------------|
| Scoping              | Rules of storing/retrieving objects         |
| Environment          | Virtual compartment for data and functions  |
| Global environment   | All user-created objects                    |
| Package environments | Objects contained in packages               |
| Namespace            | Defines visibility of package functions     |
|                      | E.g. in ~base::~ for the ~base~ package         |
| ~ls()~                 | List global environment                     |
| ~ls(package:base)~     | List functions in the ~base~ package          |
| Local environment    | Objects created when function is called     |
| Search path          | List of environments searched, ~search()~     |
| ~matrix~               | Create matrix                               |
| ~seq~                  | Create numerical sequence vector            |
| ~base::data~           | List or load dataset                        |
| ~NaN~                  | Not a number                                |
| ~Inf~                  | Infinite numerical value                    |
| ~NA~                   | Missing value                               |
| ~NULL~                 | Null object - returned when value undefined |
| ~paste~                | Paste arguments together as string          |
| ~rm~                   | Remove R objectts, e.g. ~rm(list=ls())~       |

* References

- Gupta, S. (Mar 29, 2012). How R Searches and Finds Stuff. URL:
  [[https://blog.thatbuthow.com/how-r-searches-and-finds-stuff/][blog.thatbuthow.com]].
