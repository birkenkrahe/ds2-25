#+TITLE: CONDITIONAL STATEMENTS - IF ELSE IFELSE - CODEALONG
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
#+attr_html: :width 300px
* README

You will learn:

- How to control the flow and execution order in R code
- How to use ~if~, ~else~ and ~ifelse~ statements in R

Download the *raw* file from [[https://tinyurl.com/R-ifelse][tinyurl.com/R-ifelse]], save it as
=ifelse.org= & code along during the lecture.

* ~if~ statements

- An ~if~ statement runs a block of code only if its condition is ~TRUE~.

- In R, condition and loop statements are bundled in "Control Flow" -
  see =help(Control)= or =?if=

- In this lecture, we'll discuss ~if~, ~else~, and ~ifelse~.

- Btw, what's an "Algol-like language"?

* Stand-alone ~if~ statements

  - The /condition/ must yield a single ~logical~ value, ~TRUE~ or ~FALSE~:
    #+begin_example R
    if (condition) {
       do anything here
    }
    #+end_example

  - Simple example:
    1) store two values
    2) compare the values (condition)
    3) do something inside the conditional statement
    #+begin_src R :results silent

    #+end_src

  - What value will ~a~ have afterwards?
    #+begin_src R

    #+end_src

  - Can you turn this into a function ~square~ with two arguments?
    1) define ~square~ as a =function=
    2) call ~square~ on the arguments ~3,4~
    #+begin_src R
      ## define function

      ## function call

    #+end_src

  - Can you write the code above in 2 lines only?
    #+begin_src R


    #+end_src

* ~if~ statement in the R console

[[https://github.com/birkenkrahe/ds2-25/blob/main/img/3_console.png][Open this image in the browser.]]

1) Open the R console ~*R*~ (in Emacs: ~C-x b~)
2) Show the listing of all current R objects
3) Remove ~a~ and ~mynumber~ and check that they're gone
4) Enter ~a <- 3~ and ~mynumber <- 4~
5) Enter the ~if~ statement on three different lines
6) Print ~a~
7) Check the console continuation character ~continue~ in ~options~
8) Change the console continuation character to ">> "
9) Check the new character by running a command over 2 lines
10) Return the =options()$continue= character to the default =+=

* Extended ~if~ example

- Create two new R objects to build a more complicated ~if~ statement:
  #+begin_src R

  #+end_src

- Use ~myvec~ and ~mymat~ in this statement and run it:
  #+begin_src R

  #+end_src

- You should have got this output:
  #+begin_example org
  : Condition satisfied --
  : [1] "-- a list with 2 members now exists."
  #+end_example

- Examine the list ~mylist~ you just created:
  #+begin_src R

  #+end_src

- Let's take the statement apart ([[https://github.com/birkenkrahe/ds2-25/blob/main/img/3_example.png][image]]).

  1) Subtract ~1~ from each value of ~myvec~ and compare with ~9~, then
     check if ~any~ of the elements are ~TRUE~:
     #+begin_src R

     #+end_src

  2) Construct a 2 x 5 matrix using ~myvec~, extract row 2, column 1,
     and compare with ~6~:
     #+begin_src R

     #+end_src

  3) The condition is evaluated as ~FALSE || TRUE~, hence ~TRUE~, and the
     ~if~ statement is entered:
     #+begin_src R

     #+end_src

  4) ~cat~ is like ~print~ or ~paste~ with fewer coercions
     #+begin_src R

     #+end_src

  5) Copy ~myvec~ to ~new.myvec~ and replaces the odd-numbered indices of
     ~new.myvec~ and overwrites them with ~NA~:
     #+begin_src R

     #+end_src

  6) Create a list ~mylist~ and store ~new.myvec~ as element ~aa~. Increase
     all elements of ~mymat~ by ~0.5~ and store them as element ~bb~.
     #+begin_src R

     #+end_src

  7) Print the ~length~ of the resulting list.
     #+begin_src R

     #+end_src

* ~else~ statements

- If you want something to happen if the /condition/ is ~FALSE~, add ~else~:
  #+begin_example R
    if (condition) {
       do something if condition is TRUE
       } else {
         do something if condition is FALSE
       }
  #+end_example

  - Example: initialize values
    #+begin_src R :results silent

    #+end_src

  - Run the extended statement twice:
    #+begin_src R

    #+end_src

- After a few re-runs, the value of ~a~ will be smaller than ~mynumber~
  again, and the first part of the ~if~ statement will be accessed.

- *Challenge:* Let's turn the last code into a function and 1) print 2) plot
  the resulting series of values for 10 iterations. 

- The =function= template:
  #+begin_example R
  ## function definition
  f <- function(a,b) {
         ## body of function
       }
  ## function call
  f(a=1,b=2)
  #+end_example

- *Solution*:
  1) function definition and test call
     #+begin_src R

     #+end_src

  2) plotting 
     #+begin_src R :file ifelse.png :results output graphics file :exports both :comments both :tangle yes :noweb yes

     #+end_src
     
* ~ifelse~ for element-wise checks

- An ~if~ statement can only check the condition of a single value - it
  does not vectorize.

- If you pass a ~logical~ vector for the condition, only the first
  element will be checked and operated on (and you'll be warned):
  #+begin_src R

  #+end_src

- The function ~ifelse~ can perform vectorized checks.

- Example: create objects ~x~ and ~y~
  #+begin_src R

  #+end_src

- Suppose you want to compute ~x/y~ but every time the result is ~Inf~
  (division by zero) you want it to be replaced with ~NA~. Running
  through ~y==0~ won't work because only the first element is checked:
  #+begin_src R

  #+end_src

- Instead, use ~ifelse~ - the resulting object has the length of ~test~:
  #+begin_src R

  #+end_src

* Conditional statements in Python

- Conditional statement in Python:
  #+begin_src python :results output :session *Python* :python python3 :exports both

  #+end_src

- Vectorized condition in Python:
  #+begin_src python :results output :session *Python* :python python3 :exports both

  #+end_src

* Exercises

1. Download the raw exercise file from [[https://tinyurl.com/R-ifelse-exercise][tinyurl.com/R-ifelse-exercise]]
2. Save and complete it, and upload your solution to Canvas.

