#+TITLE: CODING LOOPS WITH "for" - LECTURE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science - Spring 2025
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
#+attr_html: :width 300px
* Download file to code along

- Download the *raw* codealong file: [[https://tinyurl.com/8-for-codealong][tinyurl.com/8-for-codealong]]:
  
  #+begin_example sh
  wget -O for.org tinyurl.com/8-for-codealong
  #+end_example

- Open it in Emacs and work through along with me.

* Coding loops overview

- Loops repeat a specified section of code often while incrementing an
  index or counter variable.

- R knows three ways of looping: ~for~ and ~while~ as in other C-type
  languages, and ~apply~ to run a function over different data
  structures.

- A ~for~ loop repeates code while going through a vector until a
  condition is no longer met:
  #+begin_example R
  for (loopindex in loopvector) {
    do any code in here
  }
  #+end_example

- A ~while~ loop repeats code until a condition evaluates as ~FALSE~:
  #+begin_example R
  while (loopcondition) {
    do any code in here
  }
  #+end_example

- The ~apply~ family of functions allows implicit looping over subsets
  of vectors, matrices or arrays to apply a function to all elements:
  #+begin_example R
    apply( X = data
           MARGIN = subset,
           FUN = function)
  #+end_example

* ~for~ loops [codealong]

  - A ~for~ loop repeats code while going through a vector until a
    condition is no longer met:
    #+begin_example R
    for (loopindex in loopvector) {
      do any code in here
    }
    #+end_example

  - ~loopindex~ represents an element in ~loopvector~

  - Simple example (try it yourself first):
    #+begin_src R
      for (myitem in 5:7) {
        cat("--BRACED AREA BEGINS--\n")
        cat("the current item is", myitem, "\n")
        cat("--BRACED AREA ENDS--\n")
      }
    #+end_src

    #+RESULTS:
    : --BRACED AREA BEGINS--
    : the current item is 5 
    : --BRACED AREA ENDS--
    : --BRACED AREA BEGINS--
    : the current item is 6 
    : --BRACED AREA ENDS--
    : --BRACED AREA BEGINS--
    : the current item is 7 
    : --BRACED AREA ENDS--

  - You can manipulate objects outside the loop, i.e. the braced area
    is not a local environment:
    #+begin_src R
      counter <- 0
      for (myitem in 5:7) {
        counter <- counter + 1
        cat("The item in run",counter,"is",myitem,"\n")
      }
    #+end_src

    #+RESULTS:
    : The item in run 1 is 5 
    : The item in run 2 is 6 
    : The item in run 3 is 7

* Looping via index or value

- There is a difference using a /loopindex/ inside a ~for~ statement
vs. representing /indices/ of a vector.

- *Loop index:* The loop below uses the /loopindex/ ~i~ to directly
represent the elements in ~myvec~:
#+begin_src R
  myvec <- c(0.4, 1.1, 0.34, 0.55)
  for (i in myvec) {
    print(2 * i)
  }
#+end_src  

#+RESULTS:
: [1] 0.8
: [1] 2.2
: [1] 0.68
: [1] 1.1

- *Vector index:* The loop below uses ~i~ to represent ~integer~ values in
the sequence ~1:length(myvec)~, which form all vector index positions
of ~myvec~. The same indices are then used to extract elements from
~myvec~.
#+begin_src R
  for (i in 1:length(myvec)) {
    print(2 * myvec[i])
  }
#+end_src  

#+RESULTS:
: [1] 0.8
: [1] 2.2
: [1] 0.68
: [1] 1.1

- Vector indices take a longer form but offer more flexibility for
more complicated ~for~ loops.

* Extended example: stepping through a ~list~

  - You want to write code that will inspect any ~list~ object and gather
    information about any ~matrix~ objects stored as ~list~ members.

  - Sample data:
    #+begin_src R
      foo <- list(
        aa=c(3,4,1),
        bb=matrix(1:4,2,2),
        cc=matrix(c(T,T,F,T,F,F),3,2),
        dd="string here",
        ee=matrix(c("red","green","blue","yellow")))
      foo
    #+end_src

    #+RESULTS:
    #+begin_example
    $aa
    [1] 3 4 1

    $bb
         [,1] [,2]
    [1,]    1    3
    [2,]    2    4

    $cc
          [,1]  [,2]
    [1,]  TRUE  TRUE
    [2,]  TRUE FALSE
    [3,] FALSE FALSE

    $dd
    [1] "string here"

    $ee
         [,1]    
    [1,] "red"   
    [2,] "green" 
    [3,] "blue"  
    [4,] "yellow"
    #+end_example

  - Problem:
    1) Go through every member of the list
    2) Check whether the member is matrix
    3) If it is a matrix, retrieve number of rows and columns and the
       data type of the matrix.

  - Solution: create vectors to store ~list~ member information:
    1) ~name~ of the ~list~ member name
    2) ~is.mat~ ("Yes" or "No") to indicate if it is a ~matrix~
    3) ~nc~ and ~nr~ for numbers of rows and columns for each matrix
    4) ~data.type~ to store the data type of each matrix
    #+begin_src R
      name <- names(foo); name
      is.mat <- rep(NA,length(foo)); is.mat
      nr <- is.mat
      nc <- is.mat
      data.type <- is.mat
    #+end_src

    #+RESULTS:
    : [1] "aa" "bb" "cc" "dd" "ee"
    : [1] NA NA NA NA NA

  - All sought variables are initialized with "missing" values ~NA~ and
    updated in the ~for~ loop. The results are put in a data frame ~bar~.

    - *Pseudocode:*
    #+begin_example
    ## vector loop over  `foo`
       ## pick a list `element`
       ## if `element` is a matrix
          ## update is.mat with "Yes"
          ## update row counter with nrow
          ## update column counter with ncol
          ## update data.type with class
       ## else
          ## update is.mat with "No"
    ## define data.frame `bar` with results
    ## print results
    #+end_example

  - Code:
    #+begin_src R
      ## vector loop over  `foo`
      for (i in 1:length(foo)) {
        ## pick a list `element`
        element <- foo[[i]] 
        ## if `element` is a matrix
        if (is.matrix(element)) {
          ## update is.mat with "Yes"
          is.mat[i] <- "Yes"
          ## update row counter with nrow
          nr[i] <- nrow(element)
          ## update column counter with ncol
          nc[i] <- ncol(element) 
          ## update data.type with class
          data.type[i] <- class(element)
        } else {
          ## update is.mat with "Yes"
          is.mat[i] <- "No"
        }
      }
      ## define data.frame `bar` with results
      bar <- data.frame(name,
                        is.mat,
                        nr,
                        nc,
                        data.type)
      ## print results
      bar
    #+end_src

  - *Error!*
    #+begin_example
    Warning messages:
    1: In data.type[i] <- class(element) :
      number of items to replace is not a multiple of replacement length
    2: In data.type[i] <- class(element) :
      number of items to replace is not a multiple of replacement length
    3: In data.type[i] <- class(element) :
      number of items to replace is not a multiple of replacement length
      name is.mat nr nc data.type
    1   aa     No NA NA      <NA>
    2   bb    Yes  2  2    matrix
    3   cc    Yes  3  2    matrix
    4   dd     No NA NA      <NA>
    5   ee    Yes  4  1    matrix
    #+end_example


  - *Why?* 
    #+begin_quote
    We stored the data type in a vector of the length of the list, but
    each member does not have that length but its own length. We must
    convert the member into a vector to run ~class~ on it.
    #+end_quote

  - Corrected code:
    #+begin_src R
      ## vector loop over  `foo`
      for (i in 1:length(foo)) {
        ## pick a list `element`
        element <- foo[[i]]
        ## if `element` is a matrix
        if (is.matrix(element)) {
          ## update is.mat with "Yes"
          is.mat[i] <- "Yes" 
          ## update row counter with nrow
          nr[i] <- nrow(element)
          ## update column counter with ncol
          nc[i] <- ncol(element) 
          ## update data.type with class of vectorized member
          data.type[i] <- class(as.vector(element)) # conversion!
        } else {
          ## update is.mat with "Yes"
          is.mat[i] <- "No"
        }
      }
      ## define data.frame `bar` with results
      bar <- data.frame(name,
                        is.mat,
                        nr,
                        nc,
                        data.type)
      ## print results
      bar
    #+end_src

    #+RESULTS:
    :   name is.mat nr nc data.type
    : 1   aa     No NA NA      <NA>
    : 2   bb    Yes  2  2   integer
    : 3   cc    Yes  3  2   logical
    : 4   dd     No NA NA      <NA>
    : 5   ee    Yes  4  1 character

  - Compare with the original list ~foo~ where the structure output
    indirectly suggests ~matrix~ objects through the indexing:
    #+begin_src R
    str(foo)
    #+end_src
  
* Nesting ~for~ loops

- ~for~ loops can be nested just like ~if~ statements.

- The inner loop is executed in full before the outer loop /loopindex/
  is incremented. Then the inner loop is executed all over again.

- Example: write code that loops over rows and columns of a matrix and
  update the matrix elements as the product of outer and inner
  loopindex.

- Solution: first, create loopindices and a base matrix:
  1) Create a ~loopvec1~ as loopindex vector ~5 6 7~
  2) Create a ~loopvec2~ as loopindex vector ~9 8 7 6~
  3) Create a ~matrix~ ~foo~ of missing values whose row and column
     numbers correspond to ~loopvec1~ and ~loopvec2~, respectively
  #+begin_src R
    loopvec1 <- 5:7; loopvec1
    loopvec2 <- 9:6; loopvec2
    foo <- matrix(NA,
                  length(loopvec1),
                  length(loopvec2))
    foo
    baz <- foo # make copy of foo for later
  #+end_src

- The outer ~for~ loop should run over as many elements as ~loopvec1~ has,
  and the inner ~for~ loop should run over as many elements as ~loopvec2~
  has. ~foo~ is then updated accordingly:
  #+begin_src R
    for (i in 1:length(loopvec1)) {
      for (j in 1:length(loopvec2)) {
        foo[i,j] <- loopvec1[i] * loopvec2[j]
      }
    }
    foo
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3] [,4]
  : [1,]   45   40   35   30
  : [2,]   54   48   42   36
  : [3,]   63   56   49   42
  
- With this code, is the matrix traversed by row or by column?
  #+begin_quote
  By column - in the example, the sequence of matrix elements filled
  is: ~foo[1,1]~, ~foo[1,2]~, ~foo[1,3]~, ~foo[2,1]~ etc.
  #+end_quote

- Inner loopvectors can be defined to match the current value of the
  loopindex of the outer loop:
  #+begin_src R
    for (i in 1:length(loopvec1)) {
      for (j in 1:i) {
        baz[i,j] <- loopvec1[i] * loopvec2[j]
      }
    }
    baz
  #+end_src

- Note that inner loop indices are decided based on the outer loop
  index: for example, when ~i=1~, the inner loopvector is ~1:1~ so it is
  executed only once before moving on to the next row.

- The code will fail if ~length(loopvec1)>length(loopvec2)~: why?
  #+begin_quote
  Because the inner loopvector ~1:i~ will exceed the number of elements
  of ~loopvec2~ - "subscript out of bounds".
  #+end_quote

  #+begin_src R
    loopvec1 <- 1:4
    loopvec2 <- 9:7
    qux <- matrix(NA,length(loopvec1),length(loopvec2)); foo
    for (i in 1:length(loopvec1)) {
      for (j in 1:i) {
        qux[i,j] <- loopvec1[i] * loopvec2[j]
      }
    }
  #+end_src

* TODO Exercises
#+attr_latex: :width 400px
[[../img/exercise.jpg]]

Download the *raw* exercise file [[https://github.com/birkenkrahe/ds2/tree/main/org][from GitHub]] and save it as
~5_loop_for_exercise.org~. When done, upload the file to Canvas.

* Glossary

| TERM          | MEANING                                   |
|---------------+-------------------------------------------|
| ~for (i in X)~  | loop over index ~i~                         |
| ~X~             | loop index or vector index                |
| ~{..}~          | loop body                                 |
| Nesting loop  | inner loop inside outer loop              |
| Loop by value | condition computed directly, e.g. ~1:10~    |
| Loop by index | condition from vector, e.g. ~1:length(vec)~ |

* References

- Davies, T.D. (2016). The Book of R. NoStarch Press.

* Footnotes
[fn:2] Because the inner loopvector ~1:i~ will exceed the number of
elements of ~loopvec2~ - "subscript out of bounds".

[fn:1] 
