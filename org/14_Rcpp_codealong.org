#+TITLE: Introduction to Rcpp
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Introduction to Advanced Data Science DSC 205 - Spring 2025
#+OPTIONS: toc:nil
#+STARTUP: overview hideblocks indent
* Overview

- What is Rcpp?
- What are R's SEXP types?
- Why use C++ with R at all?
- Evaluate with ~Rcpp::evalCpp~
- Quick example: A massive vector
- Extended example: A massive matrix
- Rcpp vs. R vs. Python: The memory trap
- Debugging and error handling
- Practice exercise: Safe square root with Rcpp
- More information
- Extensibility of R vs. Python

* What is Rcpp?

- Rcpp (2011-2025) is an R package that enables seamless integration
  of C++ code into R.

- It provides an easy API to expose C++ classes, functions, and data
  structures to R.

- Rcpp abstracts away the complexities of working directly with R's
  SEXP types.

- Rcpp is not so much an R package as a language extension of R.

* What are R's SEXP types?

- SEXP stands for Symbolic EXPression: It's the C data type that the R
  interpreter uses to represnt all R objects.

- SEXP is defined as a pointer to a structure that describes what kind
  of R object it is and holds its data:
  #+begin_src C
    typedef struct SEXPREC *SEXP;
  #+end_src

  #+RESULTS:

- This ~struct~ contains:
  + The type (e.g. integer vector, function, environment...)
  + The attributes (like ~class~ or ~dim~)
  + The actual data.

- A basic C function (multiplication by two) in R would look like
  this:
  #+begin_example C
    SEXP timesTwo(SEXP x) {
      SEXP out;
      int n = LENGTH(x);
      PROTECT(out = allocVector(REALSXP, n));
      for (int i = 0; i < n; i++) {
        REAL(out)[i] = 2 * REAL(x)[i];
      }
      UNPROTECT(1);
      return out;
    }
  #+end_example

- Rcpp wraps all this manual work behind C++ classes:
  #+begin_example C++
    // [[Rcpp::export]]
    NumericVector timesTwo(NumericVector x) {
      return x * 2;
    }
  #+end_example

* Why would I want to use C/C++ functions with R?

- Even simple operations in R can be slow when very large vectors are
  processed, custom functions are needed and memory overhead is high.

- Example: A pure R loop over 10 million elements would be much slower
  than a compiled C++ loop.

* Evaluating Simple C++ with =evalCpp=

- To begin with, install ~Rcpp~ (in the R console):
  #+begin_example R
  install.packages("Rcpp")
  #+end_example

- Load it and check out its functions:
  #+begin_src R :session *R* :results output :exports both
    library(Rcpp)
    ls("package:Rcpp")
  #+end_src

- =evalCpp= evaluates one-line C++ expressions inside R.

- Useful for quick experiments:
  #+begin_src R :session *R* :results output :exports both
    library(Rcpp)

    evalCpp("40 + 2")
    evalCpp("exp(1.0)")
    evalCpp("sqrt(4.0)")
    evalCpp("std::numeric_limits<int>::max()")
  #+end_src

- Here ~std::numeric_limits<T>~ is a template class in the ~<limits>~
  header file with information about the properties of arithmetic
  types.

- *Important*: C++ distinguishes integers and doubles carefully.

- Integer division:
  #+begin_src R :session *R* :results output :exports both
    evalCpp("13 / 4")            # 3 (integer division)
    evalCpp("(double)13 / 4")    # 3.25 (floating point division)
    typeof(evalCpp("(double)13 / 4"))
    13/4 # numeric treated as double in R by default
    as.double(13)/as.double(4)
  #+end_src

* Quick Example

- Multiply a vector by two.

- Write it as an R script:
  #+begin_src R :session *R* :results output :exports both
    ## Load Rcpp
    library(Rcpp)

    ## Define C++ function `timesTwo`
    Rcpp::cppFunction('
    NumericVector timesTwo(NumericVector x) {
          return x * 2;
        }')

    ## Function call
    timesTwo(c(1,2,3))
  #+end_src

- Check out the function code:
  #+begin_src R :session *R* :results output :exports both
    timesTwo
  #+end_src

- Compare the R standard with the compiled function for a large
  vector (10^7 elements):
  #+begin_src R :session *R* :results output :exports both
    x <- runif(1e7)
    system.time(x * 2)
    system.time(timesTwo(x))
  #+end_src

- Alternatively, you can also write a C++ file, compile and load it
  with ~sourceCpp~ in an R script.
  1) Tangle C++ program
     #+begin_src C++ :tangle two.cpp :main no :includes
       #include <Rcpp.h>
       using namespace Rcpp;

       // [[Rcpp::export]]
       NumericVector timesTwo2(NumericVector x) {
         return x * 2;
       }
     #+end_src
  2) Compile, load and run function in R:
     #+begin_src R :session *R* :results output :exports both
       library(Rcpp)

       ## Compile and load
       sourceCpp(file="two.cpp")

       ## Now call the function
       timesTwo2(c(1,2,3,4))
     #+end_src

* Extended example

- Double each element of a million-row matrix, element-wise: Tangle
  the R script and send it off as a batch job.
  #+begin_src R :tangle M.R :session *R* :results none
    M <- matrix(runif(1e9),ncol=1000)
    system.time(M2 <- M * 2)
  #+end_src

- Run it on the command-line:
  #+begin_example bash
  R CMD BATCH M.R &
  ps
  #+end_example

- Check the result with =cat M.Rout= once the batch job is done.
  #+begin_src bash :results output :exports both
    tail -n 8 M.Rout
  #+end_src

- Explanation:
  1) ~user~: Time spent in R code (CPU time)
  2) ~system~: Time spent with kernel calls (memory allocation)
  3) ~elapsed~: Total (real-world) time
  4) ~proc-time~: total time since the session (batch job) started.

- Now suppose fancier computations:
  1) Only double even rows.
  2) Apply custom rounding.
  3) Handle missing values specifically.

- In R and C++, a double (~numeric~) takes 8 bytes, that means 8GB. With
  temporary copies, overhead, garbage collection, OS memory etc. this
  is closer to 16GB. If you don't have that RAM available, you burn.

- A full script for a batch job (=M2.R=):
  #+begin_src R :session *R* :results none :exports both :tangle M2.R
    #!/usr/bin/env Rscript

    ## Load necessary libraries
    library(Rcpp)

    ## Compile the Rcpp function
    Rcpp::cppFunction('
    NumericMatrix customTimes(NumericMatrix M) {
      int nrow = M.nrow(), ncol = M.ncol();
      for (int i = 0; i < nrow; ++i) {
        for (int j = 0; j < ncol; ++j) {
          if (i % 2 == 0)
            M(i, j) *= 2;
          else
            M(i, j) *= 3;
        }
      }
      return M;
    }
    ')

    ## Start timing
    start_time <- Sys.time()

    ## Configure matrix size
    n_elements <- 1e9          ## Total number of elements
    n_cols <- 1000             ## Number of columns
    n_rows <- n_elements / n_cols

    ## Generate large random matrix
    cat("Generating matrix...\n")
    M <- matrix(runif(n_elements), nrow = n_rows, ncol = n_cols)

    ## Garbage collect before heavy operation
    gc()

    ## Apply the C++ function
    cat("Processing matrix with C++ function...\n")
    M_processed <- customTimes(M)

    ## Optional: Save output to file (e.g., RDS format for efficiency)
    cat("Saving processed matrix...\n")
    saveRDS(M_processed, file = "processed_matrix.rds")

    ## Clean up
    rm(M)
    rm(M_processed)
    gc()

    ## End timing
    end_time <- Sys.time()
    elapsed <- end_time - start_time

    ## Report
    cat("Batch job completed successfully.\n")
    cat(sprintf("Elapsed time: %.2f minutes\n", as.numeric(elapsed, units="mins")))
  #+end_src

- Batch job result: look at =M2.Rout=
  #+begin_example

  R version 4.1.2 (2021-11-01) -- "Bird Hippie"
  Copyright (C) 2021 The R Foundation for Statistical Computing
  Platform: x86_64-pc-linux-gnu (64-bit)

  R is free software and comes with ABSOLUTELY NO WARRANTY.
  You are welcome to redistribute it under certain conditions.
  Type 'license()' or 'licence()' for distribution details.

    Natural language support but running in an English locale

  R is a collaborative project with many contributors.
  Type 'contributors()' for more information and
  'citation()' on how to cite R or R packages in publications.

  Type 'demo()' for some demos, 'help()' for on-line help, or
  'help.start()' for an HTML browser interface to help.
  Type 'q()' to quit R.

  ,*** Loaded .Rprofile ***
  > #!/usr/bin/env Rscript
  >
  > ## Load necessary libraries
  > library(Rcpp)
  >
  > ## Compile the Rcpp function
  > Rcpp::cppFunction('
  + NumericMatrix customTimes(NumericMatrix M) {
  +   int nrow = M.nrow(), ncol = M.ncol();
  +   for (int i = 0; i < nrow; ++i) {
  +     for (int j = 0; j < ncol; ++j) {
  +       if (i % 2 == 0)
  +         M(i, j) *= 2;
  +       else
  +         M(i, j) *= 3;
  +     }
  +   }
  +   return M;
  + }
  + ')
  >
  > ## Start timing
  > start_time <- Sys.time()
  >
  > ## Configure matrix size
  > n_elements <- 1e9          ## Total number of elements
  > n_cols <- 1000             ## Number of columns
  > n_rows <- n_elements / n_cols
  >
  > ## Generate large random matrix
  > cat("Generating matrix...\n")
  Generating matrix...
  > M <- matrix(runif(n_elements), nrow = n_rows, ncol = n_cols)
  >
  > ## Garbage collect before heavy operation
  > gc()
               used   (Mb) gc trigger    (Mb)   max used    (Mb)
  Ncells     378711   20.3     679020    36.3     679020    36.3
  Vcells 1000634700 7634.3 2402854623 18332.4 2000635685 15263.7
  >
  > ## Apply the C++ function
  > cat("Processing matrix with C++ function...\n")
  Processing matrix with C++ function...
  > M_processed <- customTimes(M)
  >
  > ## Optional: Save output to file (e.g., RDS format for efficiency)
  > cat("Saving processed matrix...\n")
  Saving processed matrix...
  > saveRDS(M_processed, file = "processed_matrix.rds")
  #+end_example

- Explanation: ~gc()~ prints memory management stats:

  1) Ncells are (internal) R cells - uses 20-36 MByte - no problem.

  2) Vcells are vector cells (numeric arrays):
     + =used=: Currently allocated (~ 1e9 elements)
     + =(Mb)=: Memory size used (~ 7.6 GB)
     + =gc trigger=: Threshold where garbage collection will trigger(~
       18 GB)
     + =max used=: Maximum vector cells used at any point (~ 15 GB).

- What does this tell us?
  1) The 1e9 (1 bn) element matrix is successfully allocated (7.6 GB).
  2) R's garbage collector is not panicked yet (otherwise abort).
  3) Peak memory much higher (temporary copies?).

- You need to consider
  1) Optimize by processing operation in chunks or use external memory.
  2) Free up memory manually by using ~rm~ and ~gc~.
  3) Redesign your algorithm to avoid temporary object storage.

* Rcpp magic vs. R vs. Python

- But why does ~Rcpp~ not magically speed up the program?
  #+begin_quote
  Rcpp speeds up computation but does not bypass R's memory model. To
  get manual memory control, use Rcpp pointer / memory functions.

  | Feature             | Rcpp                   | R memory manager           |
  |---------------------+------------------------+----------------------------|
  | What it controls    | How fast C++ computes  | How objects are allocated  |
  | Who owns the memory | Still R (can override) | R's garbage collector (GC) |
  | Who triggers GC     | Still R                | R                          |
  | Where objects live  | In R’s memory heap     | In R’s memory heap         |

  Rcpp makes things faster, but to make things bigger without GC
  problems, you need external memory or hardware with more RAM.
  #+end_quote

- Is the situation any better with Python (regarding memory control)?
  #+begin_quote
  Only slightly: Python is still garbage-collected, multithreading
  (C++ true strength) is limited by Python's Global Interpreter Lock
  (only one thread of Python bytecode can run at a time even on
  multi-core systems), and there is wrapping/unwrapping overhead.
  #+end_quote

* Debugging: Print and Error Handling

- Use =Rprintf()= to print from inside C++ functions:
  #+begin_src R :session *R* :results output :exports both
    library(Rcpp)

    cppFunction('
    int fun() {
      int x = 42;
      Rprintf("Hello from C++, x=%d\\n", x);
      return x;
    }
    ')

    fun()
  #+end_src

- Throw errors using =stop()=:
  #+begin_src R :session *R* :results output :exports both
    cppFunction('
    int checkPositive(int x) {
      if (x < 0) stop("x must be positive");
      return x;
    }
    ')

    checkPositive(-1)
  #+end_src

* Exercise: Safe Square Root with Rcpp

- Write an Rcpp function that safely computes the square root of a
  numeric vector. The function should:

  1. Take a ~NumericVector~ as input.
  2. Throw an error if any value is negative.
  3. Print the *mean* of the input using ~Rprintf()~.
  4. Return a new vector of square roots.

- Sample input:
  #+begin_example R
    safeSqrt(c(1, 4, 9))
    safeSqrt(c(1, -2, 4))  # should throw an error
  #+end_example

- Sample output:
  #+begin_example
    Mean input value: 4.67
    [1] 1 2 3
    Error: Negative values not allowed!
  #+end_example

- Put the source code into the starter code block:
  #+begin_src R :session *R* :results output :exports both
    ## Load Rcpp
    ## Rcpp function
    ## BEGIN API

    // Define a function that takes a numeric vector x
    // Return type: numeric vector

    // BEGIN
    // SET n TO size of x
    // SET sum TO 0

    // FOR i FROM 0 TO n-1; DO
    // IF x[i] < 0; THEN
    // THROW error "Negative values not allowed!"
    // ENDIF
    // SET sum TO sum + x[i]
    // END FOR

    // PRINT "Mean input value: ", sum / n

    // CREATE output vector of size n

    // FOR i FROM 0 TO n-1; DO
    // SET out[i] TO sqrt(x[i])
    // END FOR

    // RETURN out
    // END
    ## END API

    ## Try it out
  #+end_src

* More information

- [[https://cran.r-project.org/web/packages/Rcpp/index.html][Package information at CRAN]]
- Rcpp is used by over 3,000 packages on CRAN
- Introductory paper "[[https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf][Extending R with C++]]"
  (Eddelbuettel/Balamuta, 2024)

* Extensibility of R vs. Python

- Which interpreted language wins when it comes to extensibility?

- It depends on the kind of extension:
  | Area                     | Winner | Notes                                |
  |--------------------------+--------+--------------------------------------|
  | C/C++ extension          | Python | Broader tooling (Cython, pybind11);  |
  |                          |        | R is excellent with Rcpp             |
  | Embedding into apps      | Python | Used in games, CAD, AI tools         |
  | Language-level extension | R      | Metaprogramming is easier (macros)   |
  | Packaging & distribution | Python | Stronger binary distribution support |
  | Sci. computing legacy    | R      | Better stats libraries and models    |

- R was designed to extend its capabilities by interfacing to other
  software, while Python more often absorbs functionality.

- Python's spirit of conquest leads to community fragmentation, and it
  makes it harder to keep on top of developments even for experts.

- What's best for data analysts?

  | Feature              | R                     | Python                      |
  |----------------------+-----------------------+-----------------------------|
  | Stats & modeling     | Best-in-class         | Adequate via statsmodels    |
  | Data wrangling       | Excellent: data.table | Excellent: pandas           |
  | Visualization        | ggplot2, shiny        | matplotlib, seaborn, plotly |
  | Machine learning     | caret, mlr            | scikit-learn, PyTorch, etc. |
  | Software development | Limited               | Full-featured               |
  | Industry popularity  | Moderate              | Very high                   |
  | Learning curve       | Gentle for analysts   | Steeper but broader         |
  | Demand               | High in gov, health   | High across industries      |
  | Exclusiveness        | Higher-fewer experts  | Lower-competitive field     |
