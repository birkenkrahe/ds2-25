#+TITLE: CODING LOOPS WITH "apply" - LECTURE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science - Spring 2025
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README
#+attr_html: :width 400px
#+caption: Photo by Brett Jordan on Unsplash
[[../img/7_goforit.jpg]]

- Download the *raw* file to codealong: [[https://tinyurl.com/apply-code-along][tinyurl.com/apply-code-along]] and
  code along!

* ~apply~, ~lapply~, ~sapply~, ~tapply~, ~vapply~, ~mapply~
#+attr_latex: :width 400px
#+caption: Family by Rajiv Perera on Unsplash
[[../img/7_family.jpg]]

- The ~apply~ family of functions allows implicit looping over subsets
  of vectors, matrices or arrays to apply a function a subset of their
  elements.

- The different flavors of ~apply~ are:
  1) ~apply~ applies a function to a dataset's margin (segment)
  2) ~tapply~ to apply a function to subsets defined in terms of ~factor~
     vectors, i.e. sliced by categorical variable values.
  3) ~lapply~ operates member by member on a ~list~.
  4) ~sapply~ to return simplified ~lapply~ results.
  5) ~vapply~ if you know the data type you're expecting as a return.
  6) ~mapply~ as a multi-variate version of ~sapply~

- All ~apply~ type functions simplify coding enormously by replacing ~for~
  loop constructions.

- All ~apply~ type functions allow for additional arguments (~...~) to be
  passed to ~FUN~. 

* ~apply~ - implicit looping over arrays

- The ~apply~ function returns a vector or array or list of values by
  applying a function to the ~MARGIN~ of an array or matrix.
  #+begin_example R
    apply( X = data  # array with positive dim(X)
           MARGIN = subset, # aka row/column/layer etc.
           FUN = function)  # includes your own function
  #+end_example

- Does ~apply~ have any other arguments? Find out!
  #+begin_src R
    args(apply)
  #+end_src

* What's an array?
#+attr_latex: :width 400px
#+caption: R data structures (source: Ceballos, 2013)
[[../img/7_arrays.png]]

- scalars: 0-dim arrays, e.g. the number ~0~
- vectors: 1-dim arrays, e.g. ~c("a","vector")~
- matrices: 2-dim arrays, e.g. ~matrix(1:9,3,3)~
- arrays: n-dim, e.g. ~array(1:9,dim=c(3,3,2))~
  #+begin_src R
    array(1:27,dim=c(3,3,3))
  #+end_src

  #+RESULTS:
  #+begin_example
  , , 1

       [,1] [,2] [,3]
  [1,]    1    4    7
  [2,]    2    5    8
  [3,]    3    6    9

  , , 2

       [,1] [,2] [,3]
  [1,]   10   13   16
  [2,]   11   14   17
  [3,]   12   15   18

  , , 3

       [,1] [,2] [,3]
  [1,]   19   22   25
  [2,]   20   23   26
  [3,]   21   24   27
  #+end_example

- The ~MARGIN~ index follows the positional order of the dimension for
  matrices and arrays:
  | ~MARGIN~ | DATA STRUCTURE |
  |--------+----------------|
  |      1 | rows           |
  |      2 | columns        |
  |      3 | layers         |
  |      4 | blocks         |

* ~apply~ example: ~matrix~

- Create a 4 x 3 matrix with the elements ~1:12~:
  #+name: define_foo
  #+begin_src R
    foo <- matrix(1:12,4,3) # default byrow=FALSE 
    foo
  #+end_src

- Find the sum of each row of ~foo~. What about ~sum(foo)~?
  #+begin_src R
    sum(foo)  # this sums up ALL elements
    sum(1:12)
  #+end_src

- Write a =for= loop over the rows of ~foo~:
  #+begin_src R
    foo
    for (i in 1:nrow(foo)) {
      print(sum(foo[i,]))
      }
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3]
  : [1,]    1    5    9
  : [2,]    2    6   10
  : [3,]    3    7   11
  : [4,]    4    8   12
  : [1] 15
  : [1] 18
  : [1] 21
  : [1] 24

- A fancier solution if you want to store the row sums:  
  #+begin_src R
    row.totals <- rep(NA, times=nrow(foo)) # initialize counter
    for (i in 1:nrow(foo)) {
      row.totals[i] <- sum(foo[i,]) # sum over i-th row
    }
    row.totals
  #+end_src

- Much shorter with ~apply~:
  #+begin_src R
    apply(
      X = foo,
      MARGIN = 1, # MARGIN = 1 (rows), 2 (cols), 3 (layers), 4 (blocks)
      FUN = sum)
  #+end_src

- To ~sum~ over columns instead, change ~MARGIN~ to ~2~.
  #+begin_src R
    apply(
      X = foo,
      MARGIN = 2,
      FUN = sum)
  #+end_src

- You can pass additional arguments to any ~apply~ function: e.g. you
  can use the function ~sort~ and specify it to be ~decreasing~:
  #+begin_src R
    apply(
      X = foo,
      MARGIN = 1,
      FUN = sort,
      decreasing = TRUE)
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3] [,4]
  : [1,]    9   10   11   12
  : [2,]    5    6    7    8
  : [3,]    1    2    3    4

- Though, even shorter is =rowSums=:
  #+begin_src R
    rowSums(foo)
  #+end_src

  #+RESULTS:
  : [1] 15 18 21 24

* IN PROGRESS ~apply~ example: ~array~

- Create a 3 x 3 x 2 array ~bar~ with the elements ~1:18~
  #+begin_src R
    bar <- array(1:27, dim=c(3,3,2))
    bar
  #+end_src

  #+RESULTS:
  #+begin_example
  , , 1

       [,1] [,2] [,3]
  [1,]    1    4    7
  [2,]    2    5    8
  [3,]    3    6    9

  , , 2

       [,1] [,2] [,3]
  [1,]   10   13   16
  [2,]   11   14   17
  [3,]   12   15   18
  #+end_example

- Check the dimensions and object class of =baz=, and check if it's a
  =matrix= and/or an =array=:
  #+begin_src R
    dim(baz)
    class(baz)
    is.matrix(baz)
    is.array(baz)
  #+end_src

- Put differently, ~bar~ has 2 layers of 3 x 3 matrices. What does the
  following call do?
  #+begin_src R
    baz <- apply(bar,3,FUN=diag)
    baz
  #+end_src

  #+RESULTS:
  :      [,1] [,2]
  : [1,]    1   10
  : [2,]    5   14
  : [3,]    9   18

- Explanation:
  #+begin_quote
  + When called upon on an object of 3 dimensions to process only 2
    dimensions, ~apply~ processes the specified dimensions and collapses
    the others.
  + In the example, ~diag~ is applied to dimension 3 (layers).
  + ~diag~ extracts the diagonal of each 3 x 3 matrix layer and returns
    a vector of length 3 per layer.
  + When ~apply~ processes multiple slices, the results are combined in
    a matrix where each column represents the output from one slice
    (layer), and rows correspond to the elements of the output from
    the function (~diag~ gives 3 values per layer).
  #+end_quote

- Given a 4 x 4 x 3 array, what is the structure of the =result= after
  this call? What's the topology of the ~array~ object?
  #+begin_src R :session *R* :results output :exports both
    arr <- array(TRUE, dim=c(4,4,3))
    result <- apply(X = arr, MARGIN = 3, FUN = sum)
    result
    class(result)
    dim(result)
    is.vector(result)
  #+end_src

  #+RESULTS:
  : [1] 16 16 16
  : [1] "integer"
  : NULL
  : [1] TRUE

- Why?
  #+begin_quote
  The result of ~apply~ is a ~sum~, that is a scalar (0-dim
  array). Because the function was called on each layer, the ~sum~ of
  the ~TRUE~ values of each layer is computed and returned separately,
  one number per layer, as a vector.
  #+end_quote

* ~tapply~ - slicing data by categories

- ~tapply~ performs operations on subsets defined by ~factor~ vectors

- Simple example: compute the ~mean~ tooth length by supply category in
  the ~ToothGrowth~ dataset:
  #+begin_src R
    tapply(X = ToothGrowth$len,       # length of guinea pig teeth
           INDEX = ToothGrowth$supp,  # OJ or VC supply
           FUN = mean) -> meanTooth   # arithmetic average
    names(meanTooth) <- c("Orange Juice","Vitamin C")
    round(meanTooth,2)
  #+end_src

  #+RESULTS:
  : Orange Juice    Vitamin C 
  :        20.66        16.96

- The result returns the average length for guinea pigs supplied with
  orange juice (~OJ~) and vitamin C (~VC~).

- Here's another example ([[https://www.kaggle.com/datasets/nancyalaswad90/diamonds-prices][data source: Kaggle]])
  1) read web data on diamond pricing (with strings as factors)
  2) display structure of data table
  3) display first five records
  #+begin_src R
    dia.url <- "https://raw.githubusercontent.com/birkenkrahe/ds2/main/data/diamonds.csv"
    diamonds <- read.csv(dia.url, stringsAsFactors=TRUE)
    str(diamonds)
    head(diamonds)
  #+end_src

  #+RESULTS:
  #+begin_example
  'data.frame':	53943 obs. of  11 variables:
   $ X      : int  1 2 3 4 5 6 7 8 9 10 ...
   $ carat  : num  0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
   $ cut    : Factor w/ 5 levels "Fair","Good",..: 3 4 2 4 2 5 5 5 1 5 ...
   $ color  : Factor w/ 7 levels "D","E","F","G",..: 2 2 2 6 7 7 6 5 2 5 ...
   $ clarity: Factor w/ 8 levels "I1","IF","SI1",..: 4 3 5 6 4 8 7 3 6 5 ...
   $ depth  : num  61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
   $ table  : num  55 61 65 58 58 57 57 55 61 61 ...
   $ price  : int  326 326 327 334 335 336 336 337 337 338 ...
   $ x      : num  3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
   $ y      : num  3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
   $ z      : num  2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...
    X carat       cut color clarity depth table price    x    y    z
  1 1  0.23     Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
  2 2  0.21   Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
  3 3  0.23      Good     E     VS1  56.9    65   327 4.05 4.07 2.31
  4 4  0.29   Premium     I     VS2  62.4    58   334 4.20 4.23 2.63
  5 5  0.31      Good     J     SI2  63.3    58   335 4.34 4.35 2.75
  6 6  0.24 Very Good     J    VVS2  62.8    57   336 3.94 3.96 2.48
  #+end_example

- Using ~tapply~, you can add up the total value of the diamonds for the
  full data set but separated according to ~color~ (key coded):
  #+begin_src R
    tapply(
      X = diamonds$price,
      INDEX = diamonds$color,
      FUN = sum)
  #+end_src

  #+RESULTS:
  :        D        E        F        G        H        I        J 
  : 21476439 30148457 35545622 45158240 37257301 27608146 14949281

- Edge case: What if the dataset doesn't have any ~factor~ vectors? Take
  for example ~mtcars~ whose ~cyl~ variable is categorical. 
  #+begin_src R :session *R* :results output :exports both
    str(mtcars)
  #+end_src

  #+RESULTS:
  #+begin_example
  'data.frame':	32 obs. of  11 variables:
   $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
   $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
   $ disp: num  160 160 108 258 360 ...
   $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
   $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
   $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
   $ qsec: num  16.5 17 18.6 19.4 17 ...
   $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
   $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
   $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
   $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
  #+end_example

- Let's see the average fuel consumption for cars with different
  number of cylinders:
  #+begin_src R :session *R* :results output :exports both
    tapply(X=mtcars$mpg,
           INDEX=mtcars$cyl,
           FUN=mean) |> round(2)
  #+end_src

  #+RESULTS:
  :     4     6     8 
  : 26.66 19.74 15.10

- What about using ~INDEX~ on ~character~ vectors? For example ~Titanic~: We
  want to know how the numbers of are distributed across classes.
  #+begin_src R :session *R* :results output :exports both
    str(Titanic)
  #+end_src

  #+RESULTS:
  :  'table' num [1:4, 1:2, 1:2, 1:2] 0 0 35 0 0 0 17 0 118 154 ...
  :  - attr(*, "dimnames")=List of 4
  :   ..$ Class   : chr [1:4] "1st" "2nd" "3rd" "Crew"
  :   ..$ Sex     : chr [1:2] "Male" "Female"
  :   ..$ Age     : chr [1:2] "Child" "Adult"
  :   ..$ Survived: chr [1:2] "No" "Yes"

- There is a subtlety here: the data are stored in a contingency table
  #+begin_src R :session *R* :results output :exports both
    titanic <- as.data.frame(Titanic)
    str(titanic)
    head(titanic,3)
  #+end_src

  #+RESULTS:
  #+begin_example
  'data.frame':	32 obs. of  5 variables:
   $ Class   : Factor w/ 4 levels "1st","2nd","3rd",..: 1 2 3 4 1 2 3 4 1 2 ...
   $ Sex     : Factor w/ 2 levels "Male","Female": 1 1 1 1 2 2 2 2 1 1 ...
   $ Age     : Factor w/ 2 levels "Child","Adult": 1 1 1 1 1 1 1 1 2 2 ...
   $ Survived: Factor w/ 2 levels "No","Yes": 1 1 1 1 1 1 1 1 1 1 ...
   $ Freq    : num  0 0 35 0 0 0 17 0 118 154 ...
    Class  Sex   Age Survived Freq
  1   1st Male Child       No    0
  2   2nd Male Child       No    0
  3   3rd Male Child       No   35
  #+end_example

- The =Freq= column holds the numeric information. 
  #+begin_src R :session *R* :results output :exports both
    str(titanic$Freq)
  #+end_src

  #+RESULTS:
  :  num [1:32] 0 0 35 0 0 0 17 0 118 154 ...

- How many passengers were in each class on the Titanic?
  #+begin_src R :session *R* :results output :exports both
    tapply(X=titanic$Freq,
           INDEX=titanic$Class,
           FUN=sum)
  #+end_src

  #+RESULTS:
  :  1st  2nd  3rd Crew 
  :  325  285  706  885

- We conclude that ~tapply~ has no problems with categorical data that
  are typed as ~numeric~ or ~character~ data.

* ~lapply~ - cycling through lists

- ~lapply~ operates member by member on a ~list~ and returns a ~list~:
  #+name: define_list
  #+begin_src R
    baz <- list(
      aa = c(3.4,1),
      bb = matrix(1:4,2,2),
      cc = matrix(c(T,T,F,T,F,F),3,2),
      dd = "string here",
      ee = matrix(c("red","green","blue","yellow")))
  #+end_src
  
- Check for matrices in the list ~baz~:
  #+begin_src R 
    <<define_list>>
    lapply(
      X = baz,
      FUN = is.matrix)
  #+end_src

- No margin or index information is required. R knows how to apply ~FUN~
  to each member of the list, and returns a ~list~. Fun!
  
* ~sapply~ - simplified cycling

- ~sapply~ (s = "simplified") returns the same results as ~lapply~ but in
  an array form (with names retained):
  #+begin_src R
    <<define_list>>
    sap <- sapply(
            X = baz,
            FUN = is.matrix)
    sap
    is.vector(sap)   # sap is a named vector
  #+end_src

- ~baz~ has a ~names~ attribute that is copies to the corresponding
  entries of the returned object:
  #+begin_src R
    attributes(sap)
    names(sap)
    str(sap)
  #+end_src

- If we did not have ~sapply~, you could ~unlist~ the result of ~lapply~:
  #+begin_src R
    unlist(lapply(baz,is.matrix))
    sapply(baz,is.matrix)
  #+end_src

* SOMEDAY ~vapply~ - simplified cycling with safety check

- Read the help file and [[https://www.r-bloggers.com/2020/10/why-you-should-use-vapply-in-r/][this tutorial]] (Treadway, 2020).

* SOMEDAY ~mapply~ - multivariate version of ~sapply~

- Read the ~help~ file and [[https://www.statology.org/r-mapply/][this tutorial]] (Zach, 2021).

* TODO Exercises
#+attr_latex: :width 400px
[[../img/exercise.jpg]]

1) Write an implicit loop that calculates the product of all the
   column elements of the matrix returned by the call to ~apply(foo, 1,
   sort, decreasing=TRUE)~ where ~foo~ is ~matrix(1:12,4.3)~.

   /Tip: To multiply numbers, you can use the function ~prod~./
   
2) Convert the following ~for~ loop to an implicit loop that does
   exactly the same thing. Here, ~t~ transposes its matrix argument.

   /Bonus: compare the results of the two operations without looking./

   #+begin_src R
     matlist <- list(
       matrix(c(T,F,T,T),2,2),
       matrix(c("a","c","b","z","p","q"),3,2),
       matrix(1:8,2,4))
     matlist # original list

     for (i in 1:length(matlist)) {
       matlist[[i]] <- t(matlist[[i]])
     }
     matlist  # transposed list
   #+end_src

* Glossary

| TERM   | MEANING                                     |
|--------+---------------------------------------------|
| ~apply~  | apply ~function~ to the ~margin~ of a dataset ~X~ |
| ~tapply~ | apply ~function~ to subsets grouped by ~factor~ |
| ~lapply~ | apply ~function~ to ~list~ members, return ~list~ |
| ~sapply~ | simplified ~lapply~, returns vector           |
| ~vapply~ | ~apply~ when you know the return datatype     |
| ~mapply~ | multivariate version of ~sapply~              |

* References

- Ceballos, M. (2013). Data structure. URL: [[http://venus.ifca.unican.es/Rintro/dataStruct.html][venus.ifca.unican.es]].
- Davies, T.D. (2016). The Book of R. NoStarch Press.
- Treadway, A. (20 Oct 2020). Why you should use vapply in R. URL:
  [[https://theautomatic.net/2020/10/20/why-you-should-use-vapply-in-r/][theautomatic.net]].
- Zach (Dec 7, 2021). How to Use the mapply() Function in R (With
  Examples). URL: [[https://www.statology.org/r-mapply/][statology.org]].

