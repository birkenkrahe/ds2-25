#+TITLE: CODING LOOPS WITH "while" - PRACTICE FILE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

This practice file accompanies the [[https://github.com/birkenkrahe/ds2/blob/main/org/3_conditions.org][lecture]] on ~while~ loops in
~6_loop_while.org~.

* TODO Identify and pledge yourself

1) In Emacs, replace the placeholder ~[yourname]~ at the top of this
   file by your own name and write ~(pledged)~ next to it
2) Go with the cursor on the headline and hange the ~TODO~ label to ~DONE~
   by entering ~S-<right>~ ("Shift + right-arrow").

* ~while~ loops

- A ~while~ loop repeats code until a condition evaluates as ~FALSE~:
  #+begin_example R
  while (loopcondition) {
    do any code in here
  }
  #+end_example

- This means to avoid /infinite loops/, the operations in the braced
  area must cause the loop to exit.

- Exiting a loop works if either the /loopcondition/ is ~FALSE~, or if a
  ~break~ command is met.

- To escape infinite loops in Emacs, enter ~C-g~ - in the ~Rterm~ or ~Rgui~
  console (outside Emacs) enter ~C-c~ or ~<ESC>~.

* Simple example

1) Set the condition variable ~myval~ to ~5~
2) Test if ~myval~ is less than ~10~
3) If it is, increase ~myval~ by ~1~
4) Print the current value of ~myval~ using ~cat~ on one line
5) Print the current value of the condition with ~cat~ on the next line
#+begin_src R

#+end_src

* Extended Example: Robotics Workshop Baseplate Planner

- In this example, you'll use a ~while~ loop to solve a practical
  problem: planning baseplate designs for a robotics workshop. It’s
  often useful to store the loop condition in an object (like
  ~mycondition~) so you can update it dynamically inside the loop,
  adapting to changing constraints.

- *Backstory:* You’re volunteering at a kids’ robotics workshop where a
  3D printer makes square baseplates (e.g., 4x4, 5x5) based on the
  number of participants per session, stored in a vector
  ~mynumbers~. The printer caps out at 5x5 due to material limits. Your
  goal is to process ~mynumbers~, generate *identity matrices*
  (representing baseplate anchor points) for sizes ≤ 5, and stop at
  sizes > 5 or the end of the list. This helps organizers plan
  materials and teach matrix concepts.

- You’ll iterate over an integer vector ~mynumbers~ and use ~diag~ to
  create identity matrices matching each valid size.

** Understanding ~diag~

- The ~diag~ function builds or modifies diagonal matrices. Check its
  arguments:
  #+begin_src R

  #+end_src

- Test it by creating a 3x3 matrix of zeros and turning it into an
  identity matrix:
  #+begin_src R

  #+end_src

- Try adding a 2x2 identity matrix to an empty list:
  #+begin_src R

  #+end_src

** Building the Planner with a Loop

- The loop stops when it hits a number in ~mynumbers~ greater than 5
  (printer limit) or reaches the vector’s end. We’ll store the
  condition in ~mycondition~ for flexibility.

- Set up initial objects:
  #+name: initialize
  #+begin_src R :results silent
    ## Empty list to store baseplate matrices
    mylist <- list()
    ## Loop index to track position in mynumbers
    counter <- 1
    ## Session sizes from past workshops
    mynumbers <- c(4, 5, 1, 2, 6, 2, 4, 6, 6, 2)
    ## Initial condition: is first size ≤ 5?
    mycondition <- mynumbers[counter] <= 5
  #+end_src

- Create the loop:
  #+name: build_list
  #+begin_src R
    ## Loop until size > 5 or end of mynumbers

      ## Add identity matrix for current size to list

      ## Move to next session size

      ## Update condition based on next size or end

    ## Show the resulting baseplate designs

  #+end_src
  
- *Result:* ~mylist~ contains four identity matrices (4x4, 5x5, 1x1, 2x2)
  because the loop stops at the first 6 in ~mynumbers~. These matrices
  represent baseplates for sessions with 4, 5, 1, and 2 kids,
  respectively—ready for printing and workshop planning!

* Changing conditions

- Based on the extended example of storing identity matrices in a
  list, determine what the resulting =mylist= would look like for each
  of the following possible =mynumbers= vectors, without executing
  anything - then run the code to confirm:

  1) ~mynumbers <- c(2,2,2,2,5,2)~

  2) ~mynumbers <- 2:20~

  3) ~mynumbers <- c(10,1,10,1,2)~

- To check, we have to re-initialize the counter and condition
  variables then run <<build_list>>:

  1) ~mynumbers <- c(2,2,2,2,5,2)~
     #+begin_src R
       mylist <- list()  # create an empty list to store all matrices
       counter <- 1      # set loop index counter variable to 1
       mynumbers <- c(2,2,2,2,5,2) # matrix dimensions
       mycondition <- mynumbers[counter] <= 5 # while loop condition
       <<build_list>>
     #+end_src
     
  2) ~mynumbers <- 2:20~
     #+begin_src R
       mylist <- list()  # create an empty list to store all matrices
       counter <- 1      # set loop index counter variable to 1
       mynumbers <- 2:20 # matrix dimensions
       mycondition <- mynumbers[counter] <= 5 # while loop condition
       <<build_list>>
     #+end_src

  3) ~mynumbers <- c(10,1,10,1,2)~
     #+begin_src R
       mylist <- list()  # create an empty list to store all matrices
       counter <- 1      # set loop index counter variable to 1
       mynumbers <- c(10,1,10,1,2) # matrix dimensions
       mycondition <- mynumbers[counter] <= 5 # while loop condition
       <<build_list>>
     #+end_src

