#+TITLE: Writing your own functions
#+AUTHOR: [your name] (pledged)
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent inlineimages entitiespretty
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

- *Replace =[yourname]= at the top with your name.*

- In this review, we'll explore why to write your own functions in R
  with examples.

- You'll implement these from pseudocode to practice translating logic
  into code.

- Inspired by DataCamp lesson "Introduction to Writing Functions in R".

- Written and tested with support of generative AI (Grok 3 beta).

* TODO New Functionality: Calculate Midrange

Sometimes R lacks a specific tool you need. The midrange—average of
the maximum and minimum values—is a simple measure of central tendency
not built into base R.

- *Task*: Write a function ~calc_midrange~ that takes a numeric vector and
  returns its midrange (max + min) / 2.

- *Test Case*: Use ~[5, 8, 3, 10, 6]~ (should output 6.5).

*Where It’s Used*: In statistics, midrange is a quick estimate of a
dataset’s center, like ~[20, 25, 30]~ for temperatures. It’s niche but
useful in exploratory analysis when median or mean isn’t ideal.

Pseudocode:

#+BEGIN_EXAMPLE
FUNCTION calc_midrange takes a numeric vector x
  SET max_val to the maximum of x (handle missing values)
  SET min_val to the minimum of x (handle missing values)
  COMPUTE midrange as (max_val + min_val) / 2
  RETURN midrange
END FUNCTION
#+END_EXAMPLE

*Challenge:*
- Turn the function into a one-liner =calc_midrange2=.
- Which function is faster?

** Solutions

- *Long solution:*
  #+begin_src R :session *R* :results none :exports both
    ## FUNCTION calc_midrange takes a numeric vector x

    ## SET max_val to the maximum of x (handle missing values)

    ## SET min_val to the minimum of x (handle missing values)

    ## COMPUTE midrange as (max_val + min_val) / 2

    ## RETURN midrange

    ## END FUNCTION
  #+end_src

- *Test:*
  #+begin_src R :session *R* :results output :exports both
    foo <- c(5, 8, 3, 10, 6)
    calc_midrange(foo)
  #+end_src

- *Challenge:* Short solution (no intermediate objects):
  #+begin_src R :session *R* :results output :exports both
    ## FUNCTION calc_midrange takes a numeric vector x
    
  #+end_src

- Are there arguments for or against the short solution?
  #+begin_quote

  #+end_quote

- What if one wanted to re-use =max_val= and =min_val= from the long
  solution?
  #+begin_quote

  #+end_quote

- Demonstration of the ~<<-~ operator:
  #+begin_src R :session *R* :results output :exports both
    ## clean environment from user-defined stuff

    ## Define function

    ## call function

    ## print global variable

    ## list global environment

    ## print non-global variable

  #+end_src

* TODO Comparing Function Performance

Let’s explore how function design affects speed. Below are two
versions of the midrange function—your task is to measure which is
faster and explain why.

- *Task:* Benchmark Two Midrange Functions. Here are two functions that
  calculate the midrange (average of max and min):
  #+name: f1
  #+BEGIN_SRC R
    calc_midrange <- function(x) {
      max_val <- max(x, na.rm=TRUE)
      min_val <- min(x, na.rm=TRUE)
      midrange <- (max_val + min_val)/2
      return(midrange)
    }
  #+END_SRC
  #+name: f2
  #+BEGIN_SRC R
    calc_midrange2 <- function(x) {
      (max(x, na.rm=TRUE) + min(x, na.rm=TRUE)) / 2
    }
  #+END_SRC

- *Goal*: Use R to measure which function runs faster on a small and
  large dataset.

- *Steps*:
  1. Install and Load the ~microbenchmark~ package.
  2. Create a small vector and a large vector.
  3. Use ~microbenchmark()~ to compare the functions, running each at
     least 100 times.
  4. Report the ~median~ times for both functions on both datasets.

- *Test Cases*:
  - Small: =[5, 8, 3, 10, 6]= 
  - Large: =rnorm(10000)= (random normal data)

- *Where It’s Used*: In data science, performance matters when
  processing big datasets (e.g., millions of sensor readings). Small
  efficiency gains in functions can add up.

** Solution (with extension)

1. Install and load the ~microbenchmark~ package:
   #+begin_src R :session *R* :results output :exports both

   #+end_src

   Check that it's been loaded.
   #+begin_src R :session *R* :results output :exports both

   #+end_src

   We need this search more often, so let's turn the last command into
   a function using ~grep~, which returns an index:
   #+begin_src R :session *R* :results output :exports both
     
   #+end_src

   Now the function:
   #+begin_src R :session *R* :results output :exports both

   #+end_src

   To not have to recreate and/or reload this useful function, you
   need to save it and have it be loaded automatically by R, using
   ~dump~. You can check the result with ~system~ (or ~shell~ on Windows):
   #+begin_src R :session *R* :results output :exports both

   #+end_src

   To load when R starts up, add =source(~/my_functions.R)= to your
   =~/.Rprofile= file. You can test that by opening a new R console, and
   checking with =ls()=, then with =loaded("base")= to see if it worked.

   My =~/.Rprofile= file:
   #+begin_example R
   options(repos=c("https://mirrors.nics.utk.edu/cran/"))
   options(crayon.enabled = FALSE)
   options(prompt="> ")
   source("~/my_functions.R")
   message("*** Loaded .Rprofile ***")
   #+end_example

   To test this, open a terminal and start R. you should see the
   ~message~.

2. Create a small vector (e.g., 5 numbers) and a large vector (e.g.,
   10,000 numbers with ~rnorm()~).

   #+begin_src R :session *R* :results output :exports both

   #+end_src

3. Use ~microbenchmark()~ to compare the functions, running each at
   least 100 times.

   #+begin_src R :session *R* :results output :exports both

   #+end_src

   #+begin_src R :session *R* :results output :exports both
     microbenchmark(calc_midrange(small_data),calc_midrange2(small_data),times=100)
     microbenchmark(calc_midrange(large_data),calc_midrange2(large_data),times=100)
   #+end_src

4. Report the median times for both functions on both datasets.

* Converting scripts to functions

- The process:
  #+begin_quote
  1. Make a template
  2. Paste in the script
  3. Choose the arguments
  4. Replace specific values with argument names
  5. Make specific variable names more general
  6. Remove a final assignment
  #+end_quote

- Can you do this for the following script? It calculates the
  percentage of values in a dataset above a specific threshold,
  e.g. test scores above 70:
  #+begin_src R :session *R* :results output :exports both
    ## Calculate percentage of values above threshold
    scores <- c(65, 78, 92, 55, 88)
    threshold <- 70
    count_above <- sum(scores > threshold)
    total <- length(scores)
    percent_above <- (count_above / total) * 100
    percent_above
  #+end_src

- It works for only one specific case - for the given vector =scores=,
  =60%= of the values are above =70=. Generalize it as a function now!

** Sample Solution

- Steps:

  1. Make a template:
     #+begin_src R :session *R* :results none

     #+end_src

  2. Paste in the script
     #+begin_src R :session *R* :results none

     #+end_src

  3. Choose the arguments: =scores= (the data vector) and =threshold= (the
     cutoff) are variable.
     #+begin_src R :session *R* :results output :exports both

     #+end_src

  4. Make specific variable names more general: The definitions in the
     code are replaced by arguments. The variables will now be passed
     as arguments from the calling function, and the =result= will be
     returned.

     #+begin_src R :session *R* :results none

     #+end_src

  5. Remove a final assignment: =result= can be removed, and the
     calculation can be returned directly:

     #+begin_src R :session *R* :results none

     #+end_src

- Final code with sample data test:

  #+begin_src R :session *R* :results output :exports both
  #+end_src

* Converting Tidyverse to Base R

This exercise provides a simple Tidyverse code snippet for students to
rewrite using only base R functions. The task involves reading a CSV
file, selecting specific columns, and filtering rows based on a
condition.

** Tidyverse Version
#+begin_src R :session *R* :results output :exports both
  
#+end_src

- *Sample Data (grades.csv)*:
  #+begin_example
  student_id,name,grade
  1,Alice,85
  2,Bob,75
  3,Charlie,90
  4,David,65
  #+end_example

** Task
Rewrite the Tidyverse code above using only base R functions (no
external packages). Your solution should:
- Read the CSV file.
- Select the ~student_id~ and ~grade~ columns.
- Filter to keep only rows where ~grade~ is 80 or higher.
- Return the resulting data frame.

** Base R Solution
#+begin_src R :session *R* :results output :exports both

#+end_src

** Hints
- Use ~read.csv()~ instead of ~read_csv()~.
- Use column indexing (e.g., ~data[, c("col1", "col2")]~) instead of ~select()~.
- Use logical indexing (e.g., ~data[data$col > value, ]~) instead of
  ~filter()~.

** Expected Output
#+begin_example
  student_id grade
1          1    85
3          3    90
#+end_example


