#+title: Agenda Notebook
#+author: Marcus Birkenkrahe
#+subtitle: DSC 205 - Intro to Advanced Data Science - SP25
#+SEQ_TODO: TODO NEXT IN_PROGRESS | DONE CANCELLED
#+startup: overview hideblocks indent entitiespretty
#+property: :header-args:C:      :main yes :includes <stdio.h> :results output :exports both
#+property: :header-args:python: :session *Python* :python python3 :results output :exports both
#+property: :header-args:R  :session *R* :results output :exports both
#+property: :header-args:C++:    :main yes :includes <iostream> :results output :exports both
* Week 1: Course overview & R Basics Test
#+attr_html: :width 400px
[[../img/cover.png]]

- [X] Course overview
- [X] On the DataCamp assignments
- [X] A brief review of R (followed by test 1 - until Thu 23-Jan)
- [ ] Calling functions: Scope and R environments

** DONE On DataCamp assignments

1. Watch the video first with full attention.
2. Write down immediate questions for later.
3. Build a notebook for DataCamp courses.
4. Recreate the individual steps in the video.
5. Create or import datasets.
6. Look up function definitions.
7. Solve the exercises outside of DataCamp.
8. If you loathe Emacs, use DataLab or Colab instead.
9. Don't ignore nagging questions that you have.
10. Start a journal to summarize what you've learnt.

** DONE Review

1. When are data Big Data?
   #+begin_quote
   3V: When they're either very large (volume > 1 PetaByte), coming in
   fast (velocity), or consist of multiple modes or media types
   (variety).
   #+end_quote

2. What does "DevOps" mean?
   #+begin_quote
   "Development Operations", frameworks that address the interface
   between IT operations and software developers.
   #+end_quote

3. What exactly does =sudo apt update -y && sudo apt upgrade -y= mean?
   #+begin_quote
   "As super-user, use the package manager program =apt= to =update= the
   list of installed software (don't ask me any questions, and then
   (provided the =update= process is complete), install the available
   =upgrade= software (again without asking me any questions).
   #+end_quote

4. Name at least one element of a "data science workflow"!
   #+begin_quote
   1) *Search* for data, e.g. with a search engine
   2) *Download* data, e.g. with =wget= on the command-line
   3) *Edit* code & documentation in a notebook, e.g. =.org= in Emacs
   4) *Run* scripts on the command-line using the =bash= shell program
   5) *Debug* scripts, e.g. using the GNU debugger =gdb=
   6) *Visualize* results, e.g. using R's =plot= function
   7) *Predict* trends, e.g. using R's =lm= regression model
   8) *Transform* data, e.g. using =log10= for base-10 logarithms
   9) *Delete* data, e.g. by redirecting errors to =/dev/null=
   10) *Model* data, e.g. by converting CSV data to a =data.frame=
   #+end_quote

5. What is *RStudio*?
   #+begin_quote
   RStudio is a popular integrated development environment (IDE) for R
   (and Python, with SQL) with notebook and publication capabilities.
   #+end_quote

6. What is the "Tidyverse"?
   #+begin_quote
   The "Tidyverse" is a collection of R packages including the popular
   =ggplot2= visualization package, and =dplyr= for =data.frame=
   manipulation. I don't like it but don't let me stop you from liking
   and using the "Tidyverse" packages: You can turn it into an
   interesting project, too! Hadley Wickham is a central figure for
   the "Tidyverse". He is also the author of the free "R in Action"
   textbook, of the original =ggplot2=, and of RStudio.
   #+end_quote

** DONE A brief review of R - 10 problems
#+attr_html: :width 400px:
[[../img/review.png]]

- *Download* the practice file: [[https://tinyurl.com/R-basics-org][tinyurl.com/R-basics-org]] on the
  command-line using =wget= or in Emacs using =eww=

- *Complete* the practice file: There are three short problems for each
  of R's data structures - numbers, vectors, matrices, data frames,
  factors, and lists.

- *Upload* your completed practice file to Canvas so that I can check
  your state of mind and mastery.

- *Review* the solutions in class.

- *Review* your own solutions depending on how you did in class.

* Week 2: Scope and environment
#+attr_html: :width 400px:
#+caption: Nikolay Bogdanov-Belsky, Mental Arithmetic (1893)
[[../img/bogdanovbelskymentalarithmetic.jpg]]

- [X] R Basics practice: You need to train! What can I do? [fn:1].
- [X] *Test 1* (R Basics) is live - deadline: Friday 24-Jan (11:59 pm).
- [ ] Calling functions: *Scope* and R *environments*
- [ ] *Control flow*: DataCamp review (by Thursday 23-Jan, 11 am)

** DONE Scope and environments

- [X] Lecture: [[https://github.com/birkenkrahe/ds2-25/blob/main/org/2_scoping.org][See GitHub]]
- [X] Codealong: [[https://tinyurl.com/scoping-codealong-org][tinyurl.com/scoping-codealong-org]]
- [ ] Practice: [[https://tinyurl.com/scoping-practice-org][tinyurl.com/scoping-practice-org]]

** DONE DataCamp review: Control flow (9 problems)

I now longer trust that *showing* you solutions has any effect on your
learning skills. You need to *solve problems*, no matter how small. If
you don't do this on your own time, we'll do it in class.

Download and complete the practice file:
[[https://tinyurl.com/ds2-practice-2-org][tinyurl.com/ds2-practice-2-org]]

* Week 3: Arguments
#+attr_html: :width 600px:
#+caption: St. Thomas Aquinas (1225-1274)
[[../img/aquinas.jpg]]

/What are humanity's most discussed questions throughout the ages?/
#+begin_quote
- Why are we here?
- What is the purpose of life?
- Is there a higher power or ultimate truth?
- What is the nature of good and evil?
#+end_quote

- [X] On the power of arguments (a philosophical distraction)
- [X] *Projects:* Enter your ideas now - sprint review: Fri 7-Feb
- [X] *Test 2* due Fri 31-Jan (100%) - available until Fri 7-Feb (50%)
- [X] *Caveat:* test includes all of the lecture content on "scoping"
- [X] *Review:* Plot test 1 grades [[https://tinyurl.com/scoping-review-org][tinyurl.com/scoping-review-org]]
- [X] *Lecture*: Scoping, environments, namespaces (continued)
- [X] *Practice:* [[https://tinyurl.com/scoping-practice-org][tinyurl.com/scoping-practice-org]]
- [X] *Lecture*: Arguments (GitHub) with practice (GitHub)

** Projects - sprint review coming soon
#+attr_html: :width 600px:
[[../img/projects.png]]

** Plot your test grades (future assignment)
#+attr_html: :width 400px:
[[../img/test_1_report.png]]

Don't let your plotting skills go to waste! When I see a plot like
this, I always want to recreate (and improve) it (if I can).

Let's do this together! Code along: [[https://tinyurl.com/scoping-review-org][tinyurl.com/scoping-review-org]]

** Current assignments

- New scoping review assignment (deadline Feb 7).
- Pushed DataCamp assignment to Friday 11:59 pm.
- Remember: 50% for a week after the deadline, 0% thereafter.
- Project proposal deadline coming up (Feb 7).
- You can do it on your own or in a team (we'll make it work).

** Scoping practice (lab)

- *Practice* file: [[https://tinyurl.com/scoping-practice-org][tinyurl.com/scoping-practice-org]]
- Upload the result to Canvas

** Function arguments (lecture & practice)

- Download the code along file: [[https://tinyurl.com/arguments-code-along][tinyurl.com/arguments-code-along]]
- Save it as an Org-mode file
- Code along with me during the lecture.

* Week 4: Conditionals & Sprint review

- [X] Test 2 results & extended deadline (50%)
- [X] Review home assignment
- [ ] *Review:* Loops in R & function arguments
- [ ] *Test 3* due by Tuesday Feb 11 (extended deadline Friday Feb 14)
- [ ] Lecture & practice: =if= =else= =ifelse=
- [ ] In-class practice: =if= =else= =ifelse=
- [ ] Home assignment: =if= =else= =ifelse= - until Friday 14 Feb
- [X] Project revue: Briefly explain your idea(s)

** Test 2 results are excellent!
#+attr_html: :width 400px:
[[../img/test2_results.png]]

- A few missed the deadline & the extended deadline for test 1: 0 pts!
- A few missed the deadline for test 2, too: complete it for 50% by Friday!
- Use Canvas/Google Calendar to stay on top of your assignments!

** Home assignment: Scoping & Environments

Some students asked for a reminder. See also solution PDF in GitHub.

1. How would you put this code into an R script?
   #+begin_example R
   hist(Nile)
   #+end_example
   #+begin_src R :tangle histNile.R
     hist(Nile)  # tangle with C-c C-v t (org-babel-tangle)
   #+end_src

2. How would you check that a script exists without leaving R?
   #+begin_src bash :results output :exports both
     ls -l *.R  # on the CLI use the `ls` command
   #+end_src
   #+begin_src R :results output
     system("ls -l *.R*")   # shell() on Windoze
   #+end_src

   #+RESULTS:
   : -rw-rw-r-- 1 marcus marcus 55 Feb  4 11:11 histNile.R
   : -rw-rw-r-- 1 marcus marcus 11 Feb  4 11:10 hN.R

3. How can you run the script on the command-line?
   #+begin_src bash :results output :exports both
     Rscript histNile.R
   #+end_src
   #+begin_src R :results output
     system("Rscript histNile.R")
     system("ls -l *R*")
   #+end_src

   #+RESULTS:
   : -rw-rw-r-- 1 marcus marcus   55 Feb  4 11:11 histNile.R
   : -rw-rw-r-- 1 marcus marcus   11 Feb  4 11:10 hN.R
   : -rw-rw-r-- 1 marcus marcus 4609 Feb  4 11:15 Rplots.pdf

4. What is the output of the script?
   #+begin_src R :results output
     system("file R*") # Rscript produces R* files
     system("evince Rplots.pdf")  # evince is a Linux PDF viewer app
   #+end_src

   #+RESULTS:
   : Rplots.pdf: PDF document, version 1.4, 1 pages

   This is what we do when we use notebooks in class:
   #+begin_src R :file histNile.png :results output graphics file :exports both :comments both :tangle yes :noweb yes
     hist(Nile)
   #+end_src

   #+RESULTS:
   [[file:histNile.png]]

5. What is the other way to run R scripts on the command-line?
   #+begin_src R :results output
     system("R CMD BATCH histNile.R")
     system("ls -l *.R* R*")
     system("cat histNile.Rout")
   #+end_src

   #+RESULTS:
   #+begin_example
   -rw-rw-r-- 1 marcus marcus   55 Feb  4 11:11 histNile.R
   -rw-rw-r-- 1 marcus marcus  811 Feb  4 11:19 histNile.Rout
   -rw-rw-r-- 1 marcus marcus   11 Feb  4 11:10 hN.R
   -rw-rw-r-- 1 marcus marcus 4609 Feb  4 11:19 Rplots.pdf

   R version 4.1.2 (2021-11-01) -- "Bird Hippie"
   Copyright (C) 2021 The R Foundation for Statistical Computing
   Platform: x86_64-pc-linux-gnu (64-bit)

   R is free software and comes with ABSOLUTELY NO WARRANTY.
   You are welcome to redistribute it under certain conditions.
   Type 'license()' or 'licence()' for distribution details.

     Natural language support but running in an English locale

   R is a collaborative project with many contributors.
   Type 'contributors()' for more information and
   'citation()' on how to cite R or R packages in publications.

   Type 'demo()' for some demos, 'help()' for on-line help, or
   'help.start()' for an HTML browser interface to help.
   Type 'q()' to quit R.

   > hist(Nile)  # tangle with C-c C-v t (org-babel-tangle)
   >
   > proc.time()
      user  system elapsed
     0.108   0.017   0.116
   #+end_example

** Review & Practice: Arguments / Loops

1) Is ~matrix~ elliptic?
   #+begin_src R :results output
     args(matrix) # not elliptic - no ellipsis arguments f(par1, par2,...)
   #+end_src

   #+RESULTS:
   : function (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
   : NULL

2) Use positional matching with ~seq~ to create a sequence of values
   between -4 and 4 that progresses in steps of 0.2.
   #+begin_src R :results output
     seq(-4,4,0.2)
     args(seq)
   #+end_src

   #+RESULTS:
   :  [1] -4.0 -3.8 -3.6 -3.4 -3.2 -3.0 -2.8 -2.6 -2.4 -2.2 -2.0 -1.8 -1.6 -1.4 -1.2
   : [16] -1.0 -0.8 -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6  1.8
   : [31]  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6  3.8  4.0
   : function (...)
   : NULL

3) Identify, which style of argument matching is being used:
   exact, partial, positional, or mixed. If mixed, which arguments are
   specified?

   1. ~array~
      #+begin_src R :results output
        array(8:1,dim=c(2,2,2)) # mixed, `data` is positional
      #+end_src

      #+RESULTS:
      #+begin_example
      , , 1

           [,1] [,2]
      [1,]    8    6
      [2,]    7    5

      , , 2

           [,1] [,2]
      [1,]    4    2
      [2,]    3    1

      #+end_example

   2. ~rep~
      #+begin_src R :results output
        rep(1:2,3) # positional
      #+end_src
      
      #+RESULTS:
      : [1] 1 2 1 2 1 2

   3. ~seq~
      #+begin_src R :results output
        seq(from=10,to=8,length=5) # exact
      #+end_src

   4. ~sort~
      #+begin_src R :results output
        sort(decreasing=T,x=c(2,1,1,2,0.3,3,1.3)) # exact
      #+end_src

   5. ~which~ (1)
      #+begin_src R :results output
        matrix(c(T,F,T,T),2,2)
        which(matrix(c(T,F,T,T),2,2)) # positional
      #+end_src

      #+RESULTS:
      :       [,1] [,2]
      : [1,]  TRUE TRUE
      : [2,] FALSE TRUE
      : [1] 1 3 4

   6. ~which~ (2)
      #+begin_src R :results output
        which(matrix(c(T,F,T,T),2,2),a=T) # mixed
        args(which)
      #+end_src

      #+RESULTS:
      :      row col
      : [1,]   1   1
      : [2,]   1   2
      : [3,]   2   2
      : function (x, arr.ind = FALSE, useNames = TRUE)
      : NULL

4) What is the key difference between a =for= loop and a =while= loop?
   #+begin_quote
   A =for= loop iterates over a predefined sequence, such as a vector
   or list, and executes the loop body once for each element.

   A =while= loop, on the other hand, continues executing as long as a
   specified condition remains =TRUE=, making it useful for situations
   where the number of iterations is not known in advance.
   #+end_quote

5) What are the advantages and disadvantages of using a =for= loop
   instead of a =while= loop in R?

   #+begin_quote
   *Advantages:*
   - A =for= loop is generally more readable and requires fewer lines of
     code when iterating over a known sequence.
   - It reduces the risk of infinite loops since the iteration count
     is predetermined.
   - It is easier to debug because the loop boundaries are explicitly
     defined.

   *Disadvantages:*
   - A =for= loop is less flexible when the number of iterations is not
     known in advance.
   - If the sequence length changes dynamically within the loop, a =for=
     loop may not behave as expected.
   - It can be less efficient when iterating over large datasets
     compared to vectorized solutions.
   #+end_quote

6) Write a =for= and a =while= loop that prints the numbers 1 to 5.
   #+begin_src R :session *R* :results output :exports both
     for (i in 1:5)
       print(i)

     i <- 1
     while(i<=5) {
       print(i)
       i <- i + 1
     }
   #+end_src

   #+RESULTS:
   #+begin_example
   [1] 1
   [1] 2
   [1] 3
   [1] 4
   [1] 5
   [1] 1
   [1] 2
   [1] 3
   [1] 4
   [1] 5
   #+end_example

7) Modify the loops to print the numbers as part of a vector like so:
   #+begin_example
     [1] 1 2 3 4 5
   #+end_example

   #+begin_src R :session *R* :results output :exports both
     foo <- c() # alternative: vector()
     foo
     for (i in 1:5)
       foo[i] <- i
     foo

     bar <- c()
     i <- 1
     while(i<=5) {
       bar[i] <- i
       i <- i + 1
     }
     bar
   #+end_src

   #+RESULTS:
   : NULL
   : [1] 1 2 3 4 5
   : [1] 1 2 3 4 5

   #+begin_src R :session *R* :results output :exports both
     foo <- c()
     for (i in 1:5) {
       foo[i] <- i
     }
     foo

     bar <- c()
     i <- 1
     while(i<=5) {
       bar[i] <- i
       i <- i + 1
     }
     bar
   #+end_src

8) Write a =for= loop that prints each element of a vector, where the
   vector’s length is unknown in advance. Example vector:
   =c("Joe","Jim","Jane","Jack","Jill")=

   #+BEGIN_SRC R :results output
     values <- c("Joe","Jim","Jane","Jack","Jill")  # could be any length

     for (i in 1:length(values)) {
       print(values[i])
     }
   #+END_SRC

   #+RESULTS:
   : [1] "Joe"
   : [1] "Jim"
   : [1] "Jane"
   : [1] "Jack"
   : [1] "Jill"

9) Write a =while= loop that processes a Boolean vector, stopping as
   soon as it encounters the first =FALSE= value, when the length of the
   vector is not known. Example vector: c(TRUE, TRUE, TRUE, FALSE,
   TRUE, TRUE)

   #+begin_src R :results output
     flags <- c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE)
     i <- 1 # initialize index for loop

     while(i <= length(flags) && flags[i]) { # FALSE when both conditions are FALSE
       print(flags[i])
       i <- i + 1
     }
   #+end_src

   #+RESULTS:
   : [1] TRUE
   : [1] TRUE
   : [1] TRUE

   #+BEGIN_SRC R :results output
     flags <- c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE)  # Boolean vector
     i <- 1  # Initialize index

     while (i <= length(flags) && flags[i]) { # TRUE if both are TRUE
       print(paste("Processing element", i))
       i <- i + 1  # Increment index
     }
   #+END_SRC

10) Consider the following R code, explain step by step what this loop
    does, and determine the output.
    #+BEGIN_SRC R :results output
      vec <- c(5, 2, 9, 0, 3, 8, 7)
      i <- 1

      while (i <= length(vec)) {
        if (vec[i] == 0) {
          print("Zero encountered! Stopping loop.")
          break
        } else if (vec[i] %% 2 == 0) {
          i <- i + 1
          next
        }
        print(vec[i])
        i <- i + 1
      }
    #+END_SRC

    #+RESULTS:
    : [1] 5
    : [1] 9
    : [1] "Zero encountered! Stopping loop."

    #+begin_quote
    *Step-by-step execution:*
    - The loop starts with =i = 1= and checks if =vec[i] == 0=.
    - If =vec[i]= is =0=, it prints ="Zero encountered! Stopping loop."= and
      exits (=break=).
    - If =vec[i]= is even, the =next= statement skips printing and moves to the next iteration.
    - Otherwise, it prints =vec[i]= and increments =i=.

    *Tracing the execution:*
    - =vec[1] = 5= → odd, so =print(5)=, increment =i= to 2.
    - =vec[2] = 2= → even, so =next= skips printing, increment =i= to 3.
    - =vec[3] = 9= → odd, so =print(9)=, increment =i= to 4.
    - =vec[4] = 0= → =break= triggers, prints ="Zero encountered! Stopping
      loop."= and exits.
    #+end_quote

* Week 5: Nested If & Switch & function review
#+attr_html: :width 600px:
#+caption: Francisco de Goya, Still Life with Golden Bream (1808)
[[../img/goya.jpg]]

- [X] *Test 3* available only until tonight (max. 100%)
- [ ] *Practice* (with upload): =if=-=else=-=ifelse=
- [ ] *Programming assignment*: Conditional statements
- [ ] *DataCamp review*: Functions (next test)
- [ ] *Lecture & Practice*: =switch= function

** Project proposal submissions

- Everybody submitted on time (never happened before)
- You should add your project to the Canvas pages
- You should put your submission into GDrive
- You should submit the URL to Canvas (1 per team)
- I will view/grade the submissions later this week
- The next sprint review is a *"Literature review"*
- *What does this mean?* (Details in Canvas later)
  1) *Understand* HOW you could continue your project.
  2) *Review* other people's stuff (scholarly papers preferred).
  3) *Deliver* either a =notebooklm= or a literature review

** DataCamp Review - Functions

1. What does the =na.rm= argument in =mean(x, na.rm = FALSE)= do?
   #+BEGIN_QUOTE
   It determines whether missing (=NA=) values should be removed before
   computation. When =FALSE=, =NA= values cause the result to be =NA=.
   #+END_QUOTE

2. Can you construct an example showing this?
   #+begin_src R :results output
     mean(c(1,2,3,NA))   # `na.rm = FALSE` is the default
     mean(c(1,2,3,NA),na.rm=TRUE)
   #+end_src

   #+RESULTS:
   : [1] NA
   : [1] 2

3. What is wrong with this code, and how would you fix it?
   #+begin_src R :results output :exports both
     function(x) {
       3 * x
     }
     ls()
   #+end_src

   #+RESULTS:
   : function (x)
   : {
   :     3 * x
   : }
   : character(0)

   #+begin_quote
   There is nothing wrong with the code as such but the function is
   not stored in an object (check with =ls()=) and cannot be used.
   #+end_quote
   #+begin_src R :session *R* :results output :exports both
     triple <- function(x) {
       3 * x
     }
     ls()
   #+end_src

   #+RESULTS:
   : [1] "triple"

4. Which of these function calls will work on this function?
   #+begin_src R :session *R* :results output :exports both
     triple(3)
     triple(y=3)
     triple(x=3)
     triple()
   #+end_src

   #+RESULTS:
   : [1] 9
   : Error in triple(y = 3) : unused argument (y = 3)
   : [1] 9
   : Error in triple() : argument "x" is missing, with no default

   #+begin_src R :session *R* :results output :exports both
     triple
     args(triple)
   #+end_src

   #+RESULTS:
   : function(x) {
   :   3 * x
   : }
   : <bytecode: 0x564099882540>
   : function (x)
   : NULL

5. What does the "black box principle" mean in the context of functions?
   #+BEGIN_QUOTE
   It means that functions take inputs, process them internally, and
   return outputs without the user needing to understand the internal
   workings. However, you can, and should, still try to analyze them!
   #+END_QUOTE

6. What happens when =ls= is called without an argument? What happens
   when =mean= is called without an argument?
   #+begin_src R :session *R* :results output :exports both
     ls()  # returns objects in the current environment
     mean()  # computes arithmetic average
     args(mean)  # shows that `x` (or 1st arg) is needed
   #+end_src

   #+RESULTS:
   : [1] "triple"
   : Error in mean.default() : argument "x" is missing, with no default
   : function (x, ...)
   : NULL

   #+begin_src R :session *R* :results output :exports both
     ls
   #+end_src

   #+RESULTS:
   #+begin_example
   function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
       pattern, sorted = TRUE)
   {
       if (!missing(name)) {
           pos <- tryCatch(name, error = function(e) e)
           if (inherits(pos, "error")) {
               name <- substitute(name)
               if (!is.character(name))
                   name <- deparse(name)
               warning(gettextf("%s converted to character string",
                   sQuote(name)), domain = NA)
               pos <- name
           }
       }
       all.names <- .Internal(ls(envir, all.names, sorted))
       if (!missing(pattern)) {
           if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
               ll != length(grep("]", pattern, fixed = TRUE))) {
               if (pattern == "[") {
                   pattern <- "\\["
                   warning("replaced regular expression pattern '[' by  '\\\\['")
               }
               else if (length(grep("[^\\\\]\\[<-", pattern))) {
                   pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
                   warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
               }
           }
           grep(pattern, all.names, value = TRUE)
       }
       else all.names
   }
   <bytecode: 0x564097f07818>
   <environment: namespace:base>
   #+end_example

   #+begin_quote
   - =ls= is a utility function that retrieves object names from an
     environment. If there is no name, it returns an empty =character=
     vector.
   - =mean= is a mathematical function expecting =numeric= input
   #+end_quote

   #+begin_src R :results output
     environment(ls)
   #+end_src

   #+RESULTS:
   : <environment: namespace:base>

7. What is the difference between =return(y)= and simply writing =y= at
   the end of an R function?
   #+BEGIN_QUOTE
   Both return the value, but using =return(y)= explicitly specifies the
   return value.
   #+END_QUOTE

8. What will happen if you call =math_magic(4)= when
   #+begin_example
     math_magic <- function(a, b) { a * b + a / b }
   #+end_example
   #+BEGIN_QUOTE
   It will result in an error because argument =b= is missing and has no
   default.
   #+END_QUOTE

9. How can you define an optional argument in an R function?
   #+BEGIN_QUOTE
   By assigning a default value: =math_magic <- function(a, b = 1)=.
   #+END_QUOTE

10. What is the difference between =library("ggvis")= and =require("ggvis")=?
    #+BEGIN_QUOTE
    =library("ggvis")= throws an error if the package is not installed,
    while =require("ggvis")= returns =FALSE= instead of an error.
    #+END_QUOTE

** Home assignment (by Monday 17 Feb) - Canvas

- The final code is short (<10 lines) but packs a punch
- You need functions =which=, =diag=, =matrix=, =substr=, and =if=, =else=
- You need to plan your approach using pseudocode
- Your submission should be a *literate program* (like your project)
- What does that mean?
  1) The submitted file is created for humans to read it (and not just
     for machines to run it).
  2) Some *documentation* that clarifies the approach (list of steps),
     the logic (like pseudocode).
  3) *Code* should be in blocks, (minimally) commented, indented (readable).
  4) *Output:* Not arbitrary but as requested ("test suite" must pass).
  5) *Meta data*: file header, purpose, author, pledge

** In-class assignment conditional statements (Canvas upload)

- Download the raw exercise file from [[https://tinyurl.com/R-ifelse-practice][tinyurl.com/R-ifelse-practice]]

- Save and complete it, and upload your solution to Canvas:
  =Classroom Assignments > Conditionals practice.=

** Review =ifelse=

1. What is the reason to use =ifelse= and what does it do?
   #+begin_quote
   From =help(ifelse)=: =ifelse(test, yes, no)=

   =ifelse= returns a value with the same shape as =test= which is filled
   with elements selected from either =yes= or =no= depending on whether
   the element of =test= is ~TRUE~ or ~FALSE~.
   #+end_quote

2. What does this code produce?
   #+begin_src R :session *R* :results output :exports both
     mat <- diag(2)
     ifelse(test=mat > 0,
            yes="High",
            no="Low")
   #+end_src

   #+RESULTS:
   :      [,1]   [,2]  
   : [1,] "High" "Low" 
   : [2,] "Low"  "High"

   #+begin_quote
   - The shape of =mat= is a 2 x 2 matrix. =ifelse= returns such a matrix.
   - The ~1~ values (=yes=) are filled with ~"High"~.
   - The ~0~ values (=no=) are filled with ~"Low"~.
   #+end_quote

3. Let =foo <- c(192,168,1,1)= and =bar <- c(192,168,1,2)=. I want to
   compare the two vectors to check if the first two elements are the
   same. Will the following code do that or not?

   #+begin_src R :session *R* :results output :exports both
     foo <- c(192,168,1,1)
     bar <- c(192,168,1,2)

     ifelse(
       test = (foo[1:2]==bar[1:2]),
       yes  = cat("Same subnet\n"),
       no   = cat("Not same subnet\n"))
   #+end_src

   #+RESULTS:
   : Same subnet
   : Error in ans[ypos] <- rep(yes, length.out = len)[ypos] : 
   :   replacement has length zero
   : In addition: Warning message:
   : In rep(yes, length.out = len) : 'x' is NULL so the result will be NULL

   #+begin_src R :session *R* :results output :exports both
     foo <- c(192,168,1,1) # IP = 192.168.1.1
     bar <- c(192,168,1,2) # IP = 192.168.1.2

     if (all(foo[1:2] == bar[1:2])) {
       cat("Same subnet\n")
     } else {
       cat("Not same subnet\n")
     }
   #+end_src

   #+RESULTS:
   : Same subnet

4. Make the =ifelse= statement explicit (by converting it to code with
   =for= and =if= and =else=?
   #+begin_src R :results output
     foo <- c(192,168,1,1)
     bar <- c(192,168,1,2)

     ifelse(foo==bar,  # check if the two vectors are identical
            yes=TRUE,  # returns TRUE as a vector element
            no=FALSE)  # returns FALSE as a vector element
   #+end_src

   #+RESULTS:
   : [1]  TRUE  TRUE  TRUE FALSE

   Solution:
   #+name: comparison
   #+begin_src R :session *R* :results output :exports both
     for (i in 1:length(foo)) {
         if(foo[i]==bar[i]) { 
           print(TRUE)
         } else {
           print(FALSE)
         }
       }
   #+end_src

   #+RESULTS: comparison
   : [1] TRUE
   : [1] TRUE
   : [1] TRUE
   : [1] FALSE
   
5. Turn the last program into a function =ip= that is called on =foo= and
   =bar= and returns the Boolean values.
   #+begin_src R :tangle ip.R :session *R* :results output :exports both :noweb yes
     ## function definition
     ip <- function(foo,bar) {
           <<comparison>>      # this is noweb (insert `comparison` block
     }
     ## function call
     ip(foo,bar)
   #+end_src

   #+RESULTS:
   : [1] TRUE
   : [1] TRUE
   : [1] TRUE
   : [1] FALSE

* Week 6: Practice nested if, switch & Loops

- [ ] *Test 4* is live - max 100% (50%) until Feb 21 (28).
- [ ] *Practice:* =switch= and nested =if= review practice
- [ ] *Lecture*: =while= loops 
- [ ] *Lecture:* =for= loops

* Footnotes

[fn:1] Do I have to review my didactic approach? My assumption has
been that if I force you to type everythng in while I do it, it will
somehow rub off on you, and motivate you to continue on your own
later. But now I am not so sure anymore. *Care to let me know what it
would take for you to get better at coding?* More graded exercises?
