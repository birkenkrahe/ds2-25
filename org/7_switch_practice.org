#+TITLE: CONDITIONS AND LOOPS - CONDITIONAL STATEMENTS - SWITCH - EXERCISES
#+AUTHOR: yourname (pledged)
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

This exercise file accompanies the [[https://github.com/birkenkrahe/ds2/blob/main/org/3_conditions.org][lecture]] on conditional
statements. Upon completion, upload it to Canvas. Source: Davies, Book
of R, p. 192.

* TODO IDENTIFY AND PLEDGE YOURSELF

1) In Emacs, replace the placeholder ~[yourname]~ at the top of this
   file by your own name and write ~(pledged)~ next to it
2) Go with the cursor on the headline and hange the ~TODO~ label to ~DONE~
   by entering ~S-<right>~ ("Shift + right-arrow").

* TODO ~factor~ manipulation and indexing (10 min)

*Goal*: Learn how to modify and replace values in a vector based on
factor labels.

*Backstory*: A group of five patients are given medication at varying
levels. Their dosage levels have been recorded and need to be checked
automatically.

1) The patient table shows the following values - store these in a
   =doselevel= object:

   | Patient | Dosage level |
   |---------+--------------|
   | Smith   | Low          |
   | Miller  | Medium       |
   | Lopez   | Medium       |
   | Garrett | Low          |
   | Dubois  | Medium       |


   Remember to clean your environment of variables first with =rm=.
   #+name: doselevels
   #+begin_src R

   #+end_src

2) Initialize the dosage for all patients with 5, storing the values
   in a =dosage= object.

   *Tip*: Make this general by using =rep= to generate a vector with the
   length of =doselevel=.

   #+name: dosage
   #+begin_src R

   #+end_src

3) Write an R script that replaces the dosage whenever the dosage
   level is medium with the value 20.

   *Tip:* Use the =%in%= operator for the condition. Example:
   #+begin_src R
     names <- c("Joe","Jim","Jane")
     if ("Jane" %in% names)
       cat("Jane is listed!")
   #+end_src

   *Solution*
   #+begin_src R

   #+end_src

4) Print the updated =dosage= vector.

   #+begin_src R

   #+end_src

The expected output is:
#+begin_example
[1] 5 20 20 5 20
#+end_example

* TODO Nested ~if~ statements (15 min)

*Goal:* Practice writing nested =if= conditions to modify variables based
on given rules.

*Backstory*: A group of five patients are given medication at varying
levels. Their dosage levels have been recorded and need to be checked
automatically.

1) Define R objects that represent the following information:
   - The low dosage level (=lowdose=) is 8.
   - The medium dosage level (=meddose=) is 30.
   - The high dosage level (=highdose=) is 55.
   - The following dosage levels (=doselevel=) were recorded for five
     patients: Low, High, Med, Low, High.

   *Solution*:
   - Dosage levels (remember to clear your R environment first):
     #+name: dose_values
     #+begin_src R

     #+end_src

   - Recorded dosage levels:
     #+name: dose_levels
     #+begin_src R
       ## define dosage levels for five patients

     #+end_src

   - Check variables in the environment:
     #+begin_src R

     #+end_src

2) Write an R script that checks if any patient received a high dosage
   level. If yes, then it checks if the low dosage value is below 10:
   if it is, halve it; if it isn't, set it to 10. In this case, script
   also sets the high dosage value to 60 if it is below 60.

   In any case, print the low and high dosage values.

   If no patient received a high dosage level, nothing happens.

   - Pseudocode:
     #+begin_example

   #+end_example

   - Solution:
     #+begin_src R :noweb yes

     #+end_src


   - The expected output is:
     #+begin_example
   lowdose: 4
   highdose: 60
   #+end_example

* TODO HOW TO ~switch~ TO ~if~ (10 min)

*Goal*: Write an explicit /stacked/ set of ~if~ statements that does the
same thing as the ~integer~ version of this ~switch~ function. Test it
with ~mynum <- 3~ and ~mynum <- 0~ (see below).

Notice that the "Test" code block includes the named ~ifswitch~ code
block.

#+begin_example R
 foo <- switch(EXPR=mynum,12,34,56,78,NA)
#+end_example
-----
Solution:
#+name: ifswitch
#+begin_src R
  ...
#+end_src
-----
Test your solution (just run it):
#+begin_src R
  mynum <- 3   # should return 56
  <<ifswitch>>
  mynum <- 0   # should return NA
  <<ifswitch>>
#+end_src

* TODO HOW TO USE ~switch~ with ~ifelse~ (5 min)

*Goal*: Assume the object ~mynum~ will only ever be a single integer
between 0 and 9. Use ~ifelse~ and ~switch~ to produce a command that takes
in ~mynum~ and returns a matching ~character~ string for all possible
values 0,1,...,9:

- Supplied with 3, for example, it should return ~"three"~.
- Supplied with 0, it should return ~"zero"~.

Notice that the "Test" code block includes the named ~ifelse~ code
block.

Solution:
#+name: ifelse
#+begin_src R
  ...
#+end_src

Test the solution (just run it):
#+begin_src R
  mynum <- 3 # should return "three"
  <<ifelse>>
  mynum <- 0 # should return "zero"
  <<ifelse>>
#+end_src
