#+TITLE: LOOPS WITH "for" - CLASSROOM PRACTICE
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* TODO Identify and pledge yourself

In Emacs, replace the placeholder ~[yourname]~ at the top of this
file by your own name and write ~(pledged)~ next to it

These exercises will help you build the necessary skills to solve the
next home assignment problem.

* Checking if an Element is a Matrix

- Write a function =isMatrix= that takes an object as input and returns
  `"Yes"` if it's a matrix and `"No"` otherwise.

- Test the function on:
  1) a 2 x 2 matrix with the elements =1:4=.
  2) a vector with the elements =1:4=.
  3) the string literal ="Hello"=.

- Solution:
  #+begin_src R

  #+end_src

* Iterating Over a List with a ~for~ Loop

- Given the list below, write a ~for~ loop that prints each element.
  #+begin_src R :results none
    mylist <- list(3, "text", matrix(1:4, 2, 2), TRUE, matrix(5:8, 2, 2))
  #+end_src

- Solution:
  #+begin_src R

  #+end_src

* Iterating over a list and checking for matrix elements

- Modify the loop in the previous exercise to print if an element is a
  matrix or not.

- Expected output:
  #+begin_example
  : [1] "No"
  : [1] "No"
  : [1] "Yes"
  : [1] "No"
  : [1] "Yes"
  #+end_example

- Solution
  #+begin_src R

  #+end_src

* Using a Counter in a Loop

- Modify the loop over ~mylist~ to count how many matrices are in
  ~mylist~.

- Expected output:
  #+begin_example
  : [1] "There are 2 matrices"
  #+end_example

- Solution
  #+begin_src R

  #+end_src

* Looping Over a Nested List

- Given the nested list (a list that contains lists) below, write a
  loop that prints each element. If the element is a list, print
  ~"Sublist found"~ instead.

- Solution:
#+begin_src R

#+end_src

* Writing a Function to Count Matrices in a Nested List

- Write a function =count_matrices= that takes a nested list (a list
  that contains lists) as input and returns the number of matrices it
  contains - including the matrices contained in sublists.

- Assume that sublists do not contain further sublists.

- Test case:
  #+begin_src R
    ## Test case
    test_list <- list(matrix(1:4, 2, 2), list("hello", matrix(5:8, 2, 2)), 42)
    print(count_matrices(test_list))  # Expected output: 2
  #+end_src

- Pseudocode:
  #+begin_example
  ## define function - list argument
  
    ## initialize matrix counter

    ## loop over nested list elements

       ## if element is.matrix
          ## increase matrix counter
       ## else if element is.list
             ## loop over list subelements
                ## if subelement is.matrix
                   ## increase matrix counter
    ## return matrix counter    

  ## call function on list
  #+end_example

- Solution:
  #+begin_src R

  #+end_src




