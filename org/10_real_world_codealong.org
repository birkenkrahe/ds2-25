#+TITLE: Functions in R: Practical Tools for Real-World Data
#+DATE: March 12, 2025
#+AUTHOR: [Your Name]
#+OPTIONS: toc:nil num:nil
#+STARTUP: overview hideblocks indent entitiespretty:
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* Introduction

You’ve mastered R’s conditionals, loops, and =apply= functions—now we’re
stepping into *functions*, with a focus on *lazy argument evaluation* and
matrix operations. These aren’t just coding exercises; they’re tools
for solving real problems. Let’s explore why they matter through
examples you might actually use.

At the end we're comparing lazy evaluation for R and Python.

* Lazy Argument Evaluation: Optimizing a Data Pipeline

- *Why It Matters:* Imagine you’re processing a massive dataset—like
  sensor readings from a weather station. You don’t want to compute
  every possible statistic upfront (e.g., /mean/, /variance/, /trends/)
  because it’s slow and some might not be needed. Lazy evaluation
  ensures R only crunches numbers when a specific output is requested,
  saving time and memory.

- *Scenario:* You’re building a tool to analyze a list of data objects
  (some are matrices, some aren’t) and multiply matrices with a
  transformation matrix—but only if it’s necessary. This mimics tasks
  like /image processing/ or /financial modeling/, where you filter and
  transform data on demand.

- *What’s Coming:* We’ll create a ~function~ that searches a list for
  matrices and multiplies them with a given matrix, leveraging lazy
  evaluation to skip unused arguments.

* Intermission: Matrix Multiplication – Modeling Real Systems

  - *Why It Matters:* Matrix multiplication isn’t just math—it’s how we
    model relationships in science, economics, and tech. For example:

    * *Physics:* Transforming coordinates of a moving object (e.g., a
      drone’s position).
    * *Economics:* Calculating revenue across product lines and regions.
    * *Machine Learning:* Applying weights to features in a neural
      network.

  - *The Rule:* For matrices =A= (size =m x n=) and =B= (size =p x q=), =n= must
    equal =p=. The result is an =m x q= matrix. R uses =%*%= for this — not =*=
    — because it’s a row-by-column operation, not element-wise.

  - *Application Example:* Suppose the matrix =Sales= represents sales data
    (2 stores, 3 products) and the matrix =Cost= is a cost matrix (3
    products, 2 cost types—e.g., production, shipping). Multiplying them
    gives total costs per store.

  - Create matrices =Sales=, =Cost= for:
    1) Stores in: Batesville and Little Rock.
    2) Products: pasta, porridge, pie.
    3) Cost types: production, shipping.

    Tip: Use ~rbind~ and ~cbind~ to add vectors row-wise and column-wise.

    #+BEGIN_SRC R

    #+END_SRC

  - *Build a Function:* Let’s write =multiply= to compute this cost
    breakdown, and multiply the quantity with the cost matrix:
    #+BEGIN_SRC R

    #+END_SRC

  - What did we learn from the data?
    #+begin_quote

    #+end_quote

  - *Why Non-Commutative?* Switch the order (=B %*% A=), and you have solved
    a different problem:
    #+BEGIN_SRC R

    #+END_SRC

  - Order defines the question—master this, and you control the
    analysis. What do these new data say?
    #+begin_quote

    #+end_quote

  - *Error Case:* If your data’s misaligned (e.g., 2x2 sales vs. 3x3
    costs), the function catches it:
    #+BEGIN_SRC R

    #+END_SRC

* Core Example: Searching and Transforming Data with =mult1=

- *Why It Matters:* In business analytics, you often deal with messy
  datasets from various sources (e.g., sales reports, cost
  spreadsheets, or CRM systems). Some data are matrices (e.g., sales
  quantities or cost breakdowns), while others are not (e.g., text
  notes). You need a function to filter and process only the relevant
  matrices, such as calculating total costs or revenues for
  decision-making.

- *Scenario:* You’re tasked with analyzing a list of datasets from
  different store branches. Some are matrices representing sales
  quantities or cost allocations (e.g., for products like pasta,
  porridge, and pie across stores like Batesville and Little Rock);
  you need to multiply them by a cost matrix to compute total
  expenses. Lazy evaluation ensures R only processes error messages
  when necessary, optimizing performance for large datasets.

- *The Function:*
  #+BEGIN_SRC R :results none

  #+END_SRC

- Function: =mult1= analyzed
  #+begin_quote
  - The ~mult1~ function is designed to process a list of datasets in
    a business analytics context, filtering for matrices (e.g., sales
    quantities or cost allocations) and multiplying compatible ones by
    a cost matrix to compute total costs or revenues. It handles messy
    inputs like text notes by identifying only matrix data.
  
  - *How It Works:* It uses ~sapply~ to check for matrices, extracts their
    indices, and loops through them. If a matrix’s column count
    matches the cost matrix’s row count, it performs matrix
    multiplication (~%*%~) and stores the result. If no compatible
    matrices are found, it returns an error message; otherwise, it
    returns a list of results.
  
  - *Use Case:* Ideal for a sales analyst processing store data to
    calculate costs, ignoring non-matrix entries like inventory notes.
  #+end_quote
  
- *Real Data Test:*
  #+BEGIN_SRC R
    foo <- list(matrix(c(2, 6, 5, 1, 2, 4), 2, 3, byrow=TRUE),
                "inventory note",                             
                matrix(c(1, 3, 4, 2, 5, 6), 2, 3, byrow=TRUE), 
                matrix(c(3, 1, 2, 4), 2, 2))                   
    mat <- matrix(c(3, -1, 1, 5), 2, 2, byrow=TRUE) 

    ...
  #+END_SRC

- *Edge Cases:*
  #+BEGIN_SRC R

  #+END_SRC

- *Lazy Payoff:* For =foo=, =str1= and =str2= are ignored—R doesn’t evaluate
  them unless the =if= conditions trigger. This efficiency is critical
  when processing large sales datasets, ensuring the function scales
  well in a business analytics pipeline.

* Default Arguments: Streamlining Reusable Tools

- *Why It Matters:* In business analytics, you’ll reuse functions across
  projects (e.g., cost calculation scripts or sales reports). Defaults
  make them plug-and-play, reducing repetitive coding. Think of a
  sales manager analyzing cost matrices — default messages save time
  when the data is inconsistent or incomplete.

- *Upgrade to =mult2=:*
  #+BEGIN_SRC R :results none

  #+END_SRC

- Function =mult2= analyzed
  #+begin_quote
  - *Purpose:* The `mult2` function extends `mult1` by adding default
    arguments for error messages, making it more user-friendly for
    repetitive business tasks like cost analysis across multiple store
    datasets.

  - *How It Works:* It retains `mult1`’s core logic (matrix filtering
    and multiplication) but sets default values for `str1` ("No
    matrices detected") and `str2` ("No compatible matrices"). Users
    can override these defaults, and the function still returns a list
    of multiplied results for compatible matrices.

  - *Use Case:* Useful for a sales manager who frequently runs cost
    calculations, allowing quick execution with defaults or customized
    messages for specific reports.
  #+end_quote

- *Application:* A sales analyst uses =mult2= to process store sales data
  without specifying messages every time:
  #+BEGIN_SRC R

  #+END_SRC

- *Customization:* Override defaults for specific reporting:
  #+BEGIN_SRC R

  #+END_SRC

* Takeaway: Connecting the Dots

- *Lazy Evaluation:* Speeds up workflows by skipping unnecessary
  computations—critical for processing large sales or cost datasets
  efficiently.

- *Matrix Multiplication:* Unlocks modeling of complex relationships
  (e.g., sales quantities and costs across stores)—a foundational
  skill for business analytics.

- *Functions:* Encapsulate logic for reusable, efficient solutions to
  recurring business problems like cost analysis or revenue
  forecasting.

These skills aren’t abstract—they’re how you’ll tackle real business
datasets, from store sales to cost breakdowns. Next, we’ll add
ellipses and more to handle even messier inputs.

