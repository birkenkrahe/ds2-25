#+title: In-class Review: Scoping Rules
#+author: [yourName] (pledged)
#+subtitle: DSC 205
#+SEQ_TODO: TODO IN_PROGRESS | DONE
#+startup: overview hideblocks indent entitiespretty:
#+property: header-args:R :session *R* :results output :exports both:
* In-class: Make a histogram of test grades (scoping review)

Inspiration: This Canvas-generated report diagram for test 1:

Preliminaries: I have already uploaded test results to
[[https://tinyurl.com/ds2-test1-data][tinyurl.com/ds2-test1-data]] using this code:
#+begin_example R :results output
  grades <- c(17.75, 19.08, 19, 20.83, 21.33, 21.67, 22, NA, 22.08, 22.67, 22.83, 23.33, 23.33, 23.33, 24, NA)
  write(grades, file="test1",ncolumns=1)
  system("cat test1")
#+end_example

Output:
#+begin_example
17.75
19.08
19
20.83
21.33
21.67
22
NA
22.08
22.67
22.83
23.33
23.33
23.33
24
NA
#+end_example

1) Download the results directly from my URL into R using =readLines=.
   #+begin_src R :session *R* :results output :exports both

   #+end_src

2) Verify that the result is a numeric vector.
   #+begin_src R :session *R* :results output :exports both

   #+end_src

3) Which namespace does =readLines= belong to?

   #+begin_src R :session *R* :results output :exports both

   #+end_src

4) Show the source code of =readLines= and specify the namespace:
   
   #+begin_src R :results output

   #+end_src

5) Remove the =NA= values and convert the points to percentages (the
   maximum point value was 25).  
   #+begin_src R :session *R* :results output :exports both

   #+end_src

6) Plot the values as a histogram with =hist=.
   #+begin_src R :file ../img/grades.png :session *R* :results file graphics output :exports both

   #+end_src

7) Customization! Complete solution with =legend=:
   #+begin_src R :file ../img/grades2.png :session *R* :results file graphics output :exports both

   #+end_src

8) How about putting the code into a script?

   #+begin_src R :tangle ../src/grades.R :results none
     x <- readLines("https://tinyurl.com/ds2-test1-data") |> as.numeric()
     x <- x[!is.na(x)]
     p <- (x/25)*100
     hist(p)
     dev.off()
   #+end_src

9) What are the steps to run this script?
  
   #+begin_example
   1. Emacs: M-x org-babel-tangle        -> file: ../src/grades.R
   2. Shell: cd ../src; Rscript grades.R -> file: Rplots.pdf
   3. Shell: evince Rplots.pdf           -> display histogram
   #+end_example

10) How many tools did we just use?

    #+begin_quote
    1. Data uploading and sharing (=write=)
    2. Check system data (=system=)
    3. Fetch data directly from URL (=readLines=)
    4. Check object characteristics (=is.vector=, =is.numeric=)
    5. Check function environment (=environment=)
    6. Access function definition in namespace (=::=)
    7. Remove =NA= values from a vector (=!is.na=)
    8. Plot a histogram with legend (=hist=, =legend=, =paste=, =format=)
    9. Write and tangle an R script (=dev.off=)
    10. Run R script on the shell (=Rscript=)
    #+end_quote
