#+TITLE: CONDITIONAL STATEMENTS - IF ELSE - ASSIGNMENT
#+AUTHOR: [yourname]
#+SUBTITLE: DSC 205 - Advanced introduction to data science
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

- This assignment accompanies the [[https://github.com/birkenkrahe/ds2/blob/main/org/3_conditions.org][lecture]] on conditional statements.

- Complete and submit the completed Org-mode file with the usual
  trimmings[fn:1] to Canvas. You get the raw Org-mode file from:
  [[https://tinyurl.com/4-ifelse-assignment][tinyurl.com/4-ifelse-assignment]].

- The "literate quality" of the submission will count for your final
  points (i.e. how much you make your solution process transparent).

- If you use generative AI to help you with this assignment in any
  way, you need to credit it and say exactly how you used it, and how
  long and what you tried until you gave in.

- If you use AI, be prepared to have to explain your solution in
  detail in class and answer pertinent questions.

- Remember though that letting AI give you the solution teaches you
  almost nothing. The smart way to deal with this is to ask AI
  afterwards for a similar but sufficiently different problem so that
  you can test your understanding..

* TODO Identify and pledge yourself

1) In Emacs, replace the placeholder ~[yourname]~ at the top of this
   file by your own name and write ~(pledged)~ next to it
2) Go with the cursor on the headline and hange the ~TODO~ label to ~DONE~
   by entering ~S-<right>~ ("Shift + right-arrow").

* Problem

Write R code that takes a square ~character~ matrix and checks if any of
the character strings on the diagonal (top left to bottom right)
begin with the letter ~g~, lowercase or uppercase.

If satisfied, overwrite these specific entries with the string ~"HERE"~.
Otherwise, the entire matrix should be replaced with an identity
matrix of the same dimensions (all diagonal entries are ~1~).

/Tip:/ You can use the functions ~which~, ~diag~ and ~substr~.

* TODO Solution

[It is strongly suggested that you develop the solution algorithm step
by step - reformulate the problem as pseudocode, test the suggested
functions, test the algorithm with a 2 x 2 matrix.]

* TODO Test your solution

  - Try your code on the following matrices, checking the result each
    time:
    #+begin_example R
    mymat1 <- matrix(as.character(1:16),4,4)
    mymat2 <- matrix(c("DANDELION","Hyacinthus","Gerbera","MARIGOLD",
                       "geranium","ligularia","Pachysandra","SNAPDRAGON",
                       "GLADIOLUS"),3,3)
    mymat3 <- matrix(c("GREAT", "exercises", "right", "here"),2,2,byrow=T)
    #+end_example

  - Expected output:
    #+begin_example
         [,1] [,2] [,3] [,4]
    [1,]    1    0    0    0
    [2,]    0    1    0    0
    [3,]    0    0    1    0
    [4,]    0    0    0    1

         [,1]         [,2]        [,3]
    [1,] "DANDELION"  "MARIGOLD"  "Pachysandra"
    [2,] "Hyacinthus" "HERE"      "SNAPDRAGON"
    [3,] "Gerbera"    "ligularia" "HERE"

         [,1]    [,2]
    [1,] "HERE"  "exercises"
    [2,] "right" "here"
    #+end_example

* Footnotes

[fn:1]"The usual trimmings" include changing the meta-data header to
your name, adding the pledge, marking completed sections as =DONE=,
providing sufficient documentation outside of the code blocks, and
obtaining the expected sample result.
